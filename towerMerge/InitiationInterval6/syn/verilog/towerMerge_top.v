// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="towerMerge_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgc2104-1-e,HLS_INPUT_CLOCK=4.167000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.637500,HLS_SYN_LAT=6,HLS_SYN_TPT=6,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=12302,HLS_SYN_LUT=2001,HLS_VERSION=2019_1}" *)

module towerMerge_top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        link_out_0_TREADY,
        link_out_1_TREADY,
        link_out_2_TREADY,
        link_out_3_TREADY,
        link_in_0_TDATA,
        link_in_0_TVALID,
        link_in_0_TREADY,
        link_in_1_TDATA,
        link_in_1_TVALID,
        link_in_1_TREADY,
        link_in_2_TDATA,
        link_in_2_TVALID,
        link_in_2_TREADY,
        link_in_3_TDATA,
        link_in_3_TVALID,
        link_in_3_TREADY,
        link_in_0_TUSER,
        link_in_1_TUSER,
        link_in_2_TUSER,
        link_in_3_TUSER,
        link_in_0_TLAST,
        link_in_1_TLAST,
        link_in_2_TLAST,
        link_in_3_TLAST,
        link_out_0_TDATA,
        link_out_0_TVALID,
        link_out_1_TDATA,
        link_out_1_TVALID,
        link_out_2_TDATA,
        link_out_2_TVALID,
        link_out_3_TDATA,
        link_out_3_TVALID,
        link_out_0_TUSER,
        link_out_1_TUSER,
        link_out_2_TUSER,
        link_out_3_TUSER,
        link_out_0_TLAST,
        link_out_1_TLAST,
        link_out_2_TLAST,
        link_out_3_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   link_out_0_TREADY;
input   link_out_1_TREADY;
input   link_out_2_TREADY;
input   link_out_3_TREADY;
input  [575:0] link_in_0_TDATA;
input   link_in_0_TVALID;
output   link_in_0_TREADY;
input  [575:0] link_in_1_TDATA;
input   link_in_1_TVALID;
output   link_in_1_TREADY;
input  [575:0] link_in_2_TDATA;
input   link_in_2_TVALID;
output   link_in_2_TREADY;
input  [575:0] link_in_3_TDATA;
input   link_in_3_TVALID;
output   link_in_3_TREADY;
input  [7:0] link_in_0_TUSER;
input  [7:0] link_in_1_TUSER;
input  [7:0] link_in_2_TUSER;
input  [7:0] link_in_3_TUSER;
input  [0:0] link_in_0_TLAST;
input  [0:0] link_in_1_TLAST;
input  [0:0] link_in_2_TLAST;
input  [0:0] link_in_3_TLAST;
output  [575:0] link_out_0_TDATA;
output   link_out_0_TVALID;
output  [575:0] link_out_1_TDATA;
output   link_out_1_TVALID;
output  [575:0] link_out_2_TDATA;
output   link_out_2_TVALID;
output  [575:0] link_out_3_TDATA;
output   link_out_3_TVALID;
output  [7:0] link_out_0_TUSER;
output  [7:0] link_out_1_TUSER;
output  [7:0] link_out_2_TUSER;
output  [7:0] link_out_3_TUSER;
output  [0:0] link_out_0_TLAST;
output  [0:0] link_out_1_TLAST;
output  [0:0] link_out_2_TLAST;
output  [0:0] link_out_3_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    link_out_0_V_data_V_1_ack_in;
wire    link_out_1_V_data_V_1_ack_in;
wire    link_out_2_V_data_V_1_ack_in;
wire    link_out_3_V_data_V_1_ack_in;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage5_11001;
reg   [575:0] link_in_0_V_data_V_0_data_out;
wire    link_in_0_V_data_V_0_vld_in;
wire    link_in_0_V_data_V_0_vld_out;
wire    link_in_0_V_data_V_0_ack_in;
reg    link_in_0_V_data_V_0_ack_out;
reg   [575:0] link_in_0_V_data_V_0_payload_A;
reg   [575:0] link_in_0_V_data_V_0_payload_B;
reg    link_in_0_V_data_V_0_sel_rd;
reg    link_in_0_V_data_V_0_sel_wr;
wire    link_in_0_V_data_V_0_sel;
wire    link_in_0_V_data_V_0_load_A;
wire    link_in_0_V_data_V_0_load_B;
reg   [1:0] link_in_0_V_data_V_0_state;
wire    link_in_0_V_data_V_0_state_cmp_full;
reg   [575:0] link_in_1_V_data_V_0_data_out;
wire    link_in_1_V_data_V_0_vld_in;
wire    link_in_1_V_data_V_0_vld_out;
wire    link_in_1_V_data_V_0_ack_in;
reg    link_in_1_V_data_V_0_ack_out;
reg   [575:0] link_in_1_V_data_V_0_payload_A;
reg   [575:0] link_in_1_V_data_V_0_payload_B;
reg    link_in_1_V_data_V_0_sel_rd;
reg    link_in_1_V_data_V_0_sel_wr;
wire    link_in_1_V_data_V_0_sel;
wire    link_in_1_V_data_V_0_load_A;
wire    link_in_1_V_data_V_0_load_B;
reg   [1:0] link_in_1_V_data_V_0_state;
wire    link_in_1_V_data_V_0_state_cmp_full;
reg   [575:0] link_in_2_V_data_V_0_data_out;
wire    link_in_2_V_data_V_0_vld_in;
wire    link_in_2_V_data_V_0_vld_out;
wire    link_in_2_V_data_V_0_ack_in;
reg    link_in_2_V_data_V_0_ack_out;
reg   [575:0] link_in_2_V_data_V_0_payload_A;
reg   [575:0] link_in_2_V_data_V_0_payload_B;
reg    link_in_2_V_data_V_0_sel_rd;
reg    link_in_2_V_data_V_0_sel_wr;
wire    link_in_2_V_data_V_0_sel;
wire    link_in_2_V_data_V_0_load_A;
wire    link_in_2_V_data_V_0_load_B;
reg   [1:0] link_in_2_V_data_V_0_state;
wire    link_in_2_V_data_V_0_state_cmp_full;
reg   [575:0] link_in_3_V_data_V_0_data_out;
wire    link_in_3_V_data_V_0_vld_in;
wire    link_in_3_V_data_V_0_vld_out;
wire    link_in_3_V_data_V_0_ack_in;
reg    link_in_3_V_data_V_0_ack_out;
reg   [575:0] link_in_3_V_data_V_0_payload_A;
reg   [575:0] link_in_3_V_data_V_0_payload_B;
reg    link_in_3_V_data_V_0_sel_rd;
reg    link_in_3_V_data_V_0_sel_wr;
wire    link_in_3_V_data_V_0_sel;
wire    link_in_3_V_data_V_0_load_A;
wire    link_in_3_V_data_V_0_load_B;
reg   [1:0] link_in_3_V_data_V_0_state;
wire    link_in_3_V_data_V_0_state_cmp_full;
wire    link_in_0_V_last_V_0_vld_in;
reg    link_in_0_V_last_V_0_ack_out;
reg   [1:0] link_in_0_V_last_V_0_state;
wire    link_in_1_V_last_V_0_vld_in;
reg    link_in_1_V_last_V_0_ack_out;
reg   [1:0] link_in_1_V_last_V_0_state;
wire    link_in_2_V_last_V_0_vld_in;
reg    link_in_2_V_last_V_0_ack_out;
reg   [1:0] link_in_2_V_last_V_0_state;
wire    link_in_3_V_last_V_0_vld_in;
reg    link_in_3_V_last_V_0_ack_out;
reg   [1:0] link_in_3_V_last_V_0_state;
reg   [575:0] link_out_0_V_data_V_1_data_out;
reg    link_out_0_V_data_V_1_vld_in;
wire    link_out_0_V_data_V_1_vld_out;
wire    link_out_0_V_data_V_1_ack_out;
reg   [575:0] link_out_0_V_data_V_1_payload_A;
reg   [575:0] link_out_0_V_data_V_1_payload_B;
reg    link_out_0_V_data_V_1_sel_rd;
reg    link_out_0_V_data_V_1_sel_wr;
wire    link_out_0_V_data_V_1_sel;
wire    link_out_0_V_data_V_1_load_A;
wire    link_out_0_V_data_V_1_load_B;
reg   [1:0] link_out_0_V_data_V_1_state;
wire    link_out_0_V_data_V_1_state_cmp_full;
reg   [575:0] link_out_1_V_data_V_1_data_out;
reg    link_out_1_V_data_V_1_vld_in;
wire    link_out_1_V_data_V_1_vld_out;
wire    link_out_1_V_data_V_1_ack_out;
reg   [575:0] link_out_1_V_data_V_1_payload_A;
reg   [575:0] link_out_1_V_data_V_1_payload_B;
reg    link_out_1_V_data_V_1_sel_rd;
reg    link_out_1_V_data_V_1_sel_wr;
wire    link_out_1_V_data_V_1_sel;
wire    link_out_1_V_data_V_1_load_A;
wire    link_out_1_V_data_V_1_load_B;
reg   [1:0] link_out_1_V_data_V_1_state;
wire    link_out_1_V_data_V_1_state_cmp_full;
reg   [575:0] link_out_2_V_data_V_1_data_out;
reg    link_out_2_V_data_V_1_vld_in;
wire    link_out_2_V_data_V_1_vld_out;
wire    link_out_2_V_data_V_1_ack_out;
reg   [575:0] link_out_2_V_data_V_1_payload_A;
reg   [575:0] link_out_2_V_data_V_1_payload_B;
reg    link_out_2_V_data_V_1_sel_rd;
reg    link_out_2_V_data_V_1_sel_wr;
wire    link_out_2_V_data_V_1_sel;
wire    link_out_2_V_data_V_1_load_A;
wire    link_out_2_V_data_V_1_load_B;
reg   [1:0] link_out_2_V_data_V_1_state;
wire    link_out_2_V_data_V_1_state_cmp_full;
reg   [575:0] link_out_3_V_data_V_1_data_out;
reg    link_out_3_V_data_V_1_vld_in;
wire    link_out_3_V_data_V_1_vld_out;
wire    link_out_3_V_data_V_1_ack_out;
reg   [575:0] link_out_3_V_data_V_1_payload_A;
reg   [575:0] link_out_3_V_data_V_1_payload_B;
reg    link_out_3_V_data_V_1_sel_rd;
reg    link_out_3_V_data_V_1_sel_wr;
wire    link_out_3_V_data_V_1_sel;
wire    link_out_3_V_data_V_1_load_A;
wire    link_out_3_V_data_V_1_load_B;
reg   [1:0] link_out_3_V_data_V_1_state;
wire    link_out_3_V_data_V_1_state_cmp_full;
wire   [7:0] link_out_0_V_user_V_1_data_out;
reg    link_out_0_V_user_V_1_vld_in;
wire    link_out_0_V_user_V_1_vld_out;
wire    link_out_0_V_user_V_1_ack_out;
reg    link_out_0_V_user_V_1_sel_rd;
wire    link_out_0_V_user_V_1_sel;
reg   [1:0] link_out_0_V_user_V_1_state;
wire   [7:0] link_out_1_V_user_V_1_data_out;
reg    link_out_1_V_user_V_1_vld_in;
wire    link_out_1_V_user_V_1_vld_out;
wire    link_out_1_V_user_V_1_ack_out;
reg    link_out_1_V_user_V_1_sel_rd;
wire    link_out_1_V_user_V_1_sel;
reg   [1:0] link_out_1_V_user_V_1_state;
wire   [7:0] link_out_2_V_user_V_1_data_out;
reg    link_out_2_V_user_V_1_vld_in;
wire    link_out_2_V_user_V_1_vld_out;
wire    link_out_2_V_user_V_1_ack_out;
reg    link_out_2_V_user_V_1_sel_rd;
wire    link_out_2_V_user_V_1_sel;
reg   [1:0] link_out_2_V_user_V_1_state;
wire   [7:0] link_out_3_V_user_V_1_data_out;
reg    link_out_3_V_user_V_1_vld_in;
wire    link_out_3_V_user_V_1_vld_out;
wire    link_out_3_V_user_V_1_ack_out;
reg    link_out_3_V_user_V_1_sel_rd;
wire    link_out_3_V_user_V_1_sel;
reg   [1:0] link_out_3_V_user_V_1_state;
wire   [0:0] link_out_0_V_last_V_1_data_out;
reg    link_out_0_V_last_V_1_vld_in;
wire    link_out_0_V_last_V_1_vld_out;
wire    link_out_0_V_last_V_1_ack_out;
reg    link_out_0_V_last_V_1_sel_rd;
wire    link_out_0_V_last_V_1_sel;
reg   [1:0] link_out_0_V_last_V_1_state;
wire   [0:0] link_out_1_V_last_V_1_data_out;
reg    link_out_1_V_last_V_1_vld_in;
wire    link_out_1_V_last_V_1_vld_out;
wire    link_out_1_V_last_V_1_ack_out;
reg    link_out_1_V_last_V_1_sel_rd;
wire    link_out_1_V_last_V_1_sel;
reg   [1:0] link_out_1_V_last_V_1_state;
wire   [0:0] link_out_2_V_last_V_1_data_out;
reg    link_out_2_V_last_V_1_vld_in;
wire    link_out_2_V_last_V_1_vld_out;
wire    link_out_2_V_last_V_1_ack_out;
reg    link_out_2_V_last_V_1_sel_rd;
wire    link_out_2_V_last_V_1_sel;
reg   [1:0] link_out_2_V_last_V_1_state;
wire   [0:0] link_out_3_V_last_V_1_data_out;
reg    link_out_3_V_last_V_1_vld_in;
wire    link_out_3_V_last_V_1_vld_out;
wire    link_out_3_V_last_V_1_ack_out;
reg    link_out_3_V_last_V_1_sel_rd;
wire    link_out_3_V_last_V_1_sel;
reg   [1:0] link_out_3_V_last_V_1_state;
reg    link_in_0_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    link_in_1_TDATA_blk_n;
reg    link_in_2_TDATA_blk_n;
reg    link_in_3_TDATA_blk_n;
reg    link_out_0_TDATA_blk_n;
wire    ap_block_pp0_stage5;
reg    link_out_1_TDATA_blk_n;
reg    link_out_2_TDATA_blk_n;
reg    link_out_3_TDATA_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
reg   [575:0] tmp_data_V_3_reg_1042;
reg   [575:0] tmp_data_V_7_reg_1049;
wire   [575:0] tmp_data_V_4_fu_840_p5;
wire   [575:0] tmp_data_V_5_fu_890_p5;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    grp_stitchInPhi_fu_250_ap_start;
wire    grp_stitchInPhi_fu_250_ap_done;
wire    grp_stitchInPhi_fu_250_ap_idle;
wire    grp_stitchInPhi_fu_250_ap_ready;
wire   [31:0] grp_stitchInPhi_fu_250_p_read;
wire   [31:0] grp_stitchInPhi_fu_250_p_read1;
wire   [31:0] grp_stitchInPhi_fu_250_p_read2;
wire   [31:0] grp_stitchInPhi_fu_250_p_read3;
wire   [31:0] grp_stitchInPhi_fu_250_p_read4;
wire   [31:0] grp_stitchInPhi_fu_250_p_read5;
wire   [31:0] grp_stitchInPhi_fu_250_p_read6;
wire   [31:0] grp_stitchInPhi_fu_250_p_read7;
wire   [31:0] grp_stitchInPhi_fu_250_p_read8;
wire   [31:0] grp_stitchInPhi_fu_250_p_read9;
wire   [31:0] grp_stitchInPhi_fu_250_p_read10;
wire   [31:0] grp_stitchInPhi_fu_250_p_read11;
wire   [31:0] grp_stitchInPhi_fu_250_p_read12;
wire   [31:0] grp_stitchInPhi_fu_250_p_read13;
wire   [31:0] grp_stitchInPhi_fu_250_p_read14;
wire   [31:0] grp_stitchInPhi_fu_250_p_read15;
wire   [31:0] grp_stitchInPhi_fu_250_p_read16;
wire   [31:0] grp_stitchInPhi_fu_250_p_read17;
wire   [31:0] grp_stitchInPhi_fu_250_p_read18;
wire   [31:0] grp_stitchInPhi_fu_250_p_read19;
wire   [31:0] grp_stitchInPhi_fu_250_p_read20;
wire   [31:0] grp_stitchInPhi_fu_250_p_read21;
wire   [31:0] grp_stitchInPhi_fu_250_p_read22;
wire   [31:0] grp_stitchInPhi_fu_250_p_read23;
wire   [31:0] grp_stitchInPhi_fu_250_p_read24;
wire   [31:0] grp_stitchInPhi_fu_250_p_read25;
wire   [31:0] grp_stitchInPhi_fu_250_p_read26;
wire   [31:0] grp_stitchInPhi_fu_250_p_read27;
wire   [31:0] grp_stitchInPhi_fu_250_p_read28;
wire   [31:0] grp_stitchInPhi_fu_250_p_read29;
wire   [31:0] grp_stitchInPhi_fu_250_p_read30;
wire   [31:0] grp_stitchInPhi_fu_250_p_read31;
wire   [31:0] grp_stitchInPhi_fu_250_p_read32;
wire   [31:0] grp_stitchInPhi_fu_250_p_read33;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_0;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_1;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_2;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_3;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_4;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_5;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_6;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_7;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_8;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_9;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_10;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_11;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_12;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_13;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_14;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_15;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_16;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_17;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_18;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_19;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_20;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_21;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_22;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_23;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_24;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_25;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_26;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_27;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_28;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_29;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_30;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_31;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_32;
wire   [31:0] grp_stitchInPhi_fu_250_ap_return_33;
reg    grp_stitchInPhi_fu_250_ap_ce;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call72;
reg    ap_block_state7_pp0_stage0_iter1_ignore_call72;
reg    ap_block_pp0_stage0_11001_ignoreCallOp46;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call72;
wire    ap_block_pp0_stage1_11001_ignoreCallOp51;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call72;
wire    ap_block_pp0_stage2_11001_ignoreCallOp52;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call72;
wire    ap_block_pp0_stage3_11001_ignoreCallOp53;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call72;
wire    ap_block_pp0_stage4_11001_ignoreCallOp54;
wire    ap_block_state6_pp0_stage5_iter0_ignore_call72;
reg    ap_block_pp0_stage5_11001_ignoreCallOp55;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage5_01001;
wire   [543:0] tmp_fu_802_p18;
wire   [543:0] tmp_1_fu_852_p18;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage4_11001;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 link_in_0_V_data_V_0_sel_rd = 1'b0;
#0 link_in_0_V_data_V_0_sel_wr = 1'b0;
#0 link_in_0_V_data_V_0_state = 2'd0;
#0 link_in_1_V_data_V_0_sel_rd = 1'b0;
#0 link_in_1_V_data_V_0_sel_wr = 1'b0;
#0 link_in_1_V_data_V_0_state = 2'd0;
#0 link_in_2_V_data_V_0_sel_rd = 1'b0;
#0 link_in_2_V_data_V_0_sel_wr = 1'b0;
#0 link_in_2_V_data_V_0_state = 2'd0;
#0 link_in_3_V_data_V_0_sel_rd = 1'b0;
#0 link_in_3_V_data_V_0_sel_wr = 1'b0;
#0 link_in_3_V_data_V_0_state = 2'd0;
#0 link_in_0_V_last_V_0_state = 2'd0;
#0 link_in_1_V_last_V_0_state = 2'd0;
#0 link_in_2_V_last_V_0_state = 2'd0;
#0 link_in_3_V_last_V_0_state = 2'd0;
#0 link_out_0_V_data_V_1_sel_rd = 1'b0;
#0 link_out_0_V_data_V_1_sel_wr = 1'b0;
#0 link_out_0_V_data_V_1_state = 2'd0;
#0 link_out_1_V_data_V_1_sel_rd = 1'b0;
#0 link_out_1_V_data_V_1_sel_wr = 1'b0;
#0 link_out_1_V_data_V_1_state = 2'd0;
#0 link_out_2_V_data_V_1_sel_rd = 1'b0;
#0 link_out_2_V_data_V_1_sel_wr = 1'b0;
#0 link_out_2_V_data_V_1_state = 2'd0;
#0 link_out_3_V_data_V_1_sel_rd = 1'b0;
#0 link_out_3_V_data_V_1_sel_wr = 1'b0;
#0 link_out_3_V_data_V_1_state = 2'd0;
#0 link_out_0_V_user_V_1_sel_rd = 1'b0;
#0 link_out_0_V_user_V_1_state = 2'd0;
#0 link_out_1_V_user_V_1_sel_rd = 1'b0;
#0 link_out_1_V_user_V_1_state = 2'd0;
#0 link_out_2_V_user_V_1_sel_rd = 1'b0;
#0 link_out_2_V_user_V_1_state = 2'd0;
#0 link_out_3_V_user_V_1_sel_rd = 1'b0;
#0 link_out_3_V_user_V_1_state = 2'd0;
#0 link_out_0_V_last_V_1_sel_rd = 1'b0;
#0 link_out_0_V_last_V_1_state = 2'd0;
#0 link_out_1_V_last_V_1_sel_rd = 1'b0;
#0 link_out_1_V_last_V_1_state = 2'd0;
#0 link_out_2_V_last_V_1_sel_rd = 1'b0;
#0 link_out_2_V_last_V_1_state = 2'd0;
#0 link_out_3_V_last_V_1_sel_rd = 1'b0;
#0 link_out_3_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

stitchInPhi grp_stitchInPhi_fu_250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_stitchInPhi_fu_250_ap_start),
    .ap_done(grp_stitchInPhi_fu_250_ap_done),
    .ap_idle(grp_stitchInPhi_fu_250_ap_idle),
    .ap_ready(grp_stitchInPhi_fu_250_ap_ready),
    .p_read(grp_stitchInPhi_fu_250_p_read),
    .p_read1(grp_stitchInPhi_fu_250_p_read1),
    .p_read2(grp_stitchInPhi_fu_250_p_read2),
    .p_read3(grp_stitchInPhi_fu_250_p_read3),
    .p_read4(grp_stitchInPhi_fu_250_p_read4),
    .p_read5(grp_stitchInPhi_fu_250_p_read5),
    .p_read6(grp_stitchInPhi_fu_250_p_read6),
    .p_read7(grp_stitchInPhi_fu_250_p_read7),
    .p_read8(grp_stitchInPhi_fu_250_p_read8),
    .p_read9(grp_stitchInPhi_fu_250_p_read9),
    .p_read10(grp_stitchInPhi_fu_250_p_read10),
    .p_read11(grp_stitchInPhi_fu_250_p_read11),
    .p_read12(grp_stitchInPhi_fu_250_p_read12),
    .p_read13(grp_stitchInPhi_fu_250_p_read13),
    .p_read14(grp_stitchInPhi_fu_250_p_read14),
    .p_read15(grp_stitchInPhi_fu_250_p_read15),
    .p_read16(grp_stitchInPhi_fu_250_p_read16),
    .p_read17(grp_stitchInPhi_fu_250_p_read17),
    .p_read18(grp_stitchInPhi_fu_250_p_read18),
    .p_read19(grp_stitchInPhi_fu_250_p_read19),
    .p_read20(grp_stitchInPhi_fu_250_p_read20),
    .p_read21(grp_stitchInPhi_fu_250_p_read21),
    .p_read22(grp_stitchInPhi_fu_250_p_read22),
    .p_read23(grp_stitchInPhi_fu_250_p_read23),
    .p_read24(grp_stitchInPhi_fu_250_p_read24),
    .p_read25(grp_stitchInPhi_fu_250_p_read25),
    .p_read26(grp_stitchInPhi_fu_250_p_read26),
    .p_read27(grp_stitchInPhi_fu_250_p_read27),
    .p_read28(grp_stitchInPhi_fu_250_p_read28),
    .p_read29(grp_stitchInPhi_fu_250_p_read29),
    .p_read30(grp_stitchInPhi_fu_250_p_read30),
    .p_read31(grp_stitchInPhi_fu_250_p_read31),
    .p_read32(grp_stitchInPhi_fu_250_p_read32),
    .p_read33(grp_stitchInPhi_fu_250_p_read33),
    .ap_return_0(grp_stitchInPhi_fu_250_ap_return_0),
    .ap_return_1(grp_stitchInPhi_fu_250_ap_return_1),
    .ap_return_2(grp_stitchInPhi_fu_250_ap_return_2),
    .ap_return_3(grp_stitchInPhi_fu_250_ap_return_3),
    .ap_return_4(grp_stitchInPhi_fu_250_ap_return_4),
    .ap_return_5(grp_stitchInPhi_fu_250_ap_return_5),
    .ap_return_6(grp_stitchInPhi_fu_250_ap_return_6),
    .ap_return_7(grp_stitchInPhi_fu_250_ap_return_7),
    .ap_return_8(grp_stitchInPhi_fu_250_ap_return_8),
    .ap_return_9(grp_stitchInPhi_fu_250_ap_return_9),
    .ap_return_10(grp_stitchInPhi_fu_250_ap_return_10),
    .ap_return_11(grp_stitchInPhi_fu_250_ap_return_11),
    .ap_return_12(grp_stitchInPhi_fu_250_ap_return_12),
    .ap_return_13(grp_stitchInPhi_fu_250_ap_return_13),
    .ap_return_14(grp_stitchInPhi_fu_250_ap_return_14),
    .ap_return_15(grp_stitchInPhi_fu_250_ap_return_15),
    .ap_return_16(grp_stitchInPhi_fu_250_ap_return_16),
    .ap_return_17(grp_stitchInPhi_fu_250_ap_return_17),
    .ap_return_18(grp_stitchInPhi_fu_250_ap_return_18),
    .ap_return_19(grp_stitchInPhi_fu_250_ap_return_19),
    .ap_return_20(grp_stitchInPhi_fu_250_ap_return_20),
    .ap_return_21(grp_stitchInPhi_fu_250_ap_return_21),
    .ap_return_22(grp_stitchInPhi_fu_250_ap_return_22),
    .ap_return_23(grp_stitchInPhi_fu_250_ap_return_23),
    .ap_return_24(grp_stitchInPhi_fu_250_ap_return_24),
    .ap_return_25(grp_stitchInPhi_fu_250_ap_return_25),
    .ap_return_26(grp_stitchInPhi_fu_250_ap_return_26),
    .ap_return_27(grp_stitchInPhi_fu_250_ap_return_27),
    .ap_return_28(grp_stitchInPhi_fu_250_ap_return_28),
    .ap_return_29(grp_stitchInPhi_fu_250_ap_return_29),
    .ap_return_30(grp_stitchInPhi_fu_250_ap_return_30),
    .ap_return_31(grp_stitchInPhi_fu_250_ap_return_31),
    .ap_return_32(grp_stitchInPhi_fu_250_ap_return_32),
    .ap_return_33(grp_stitchInPhi_fu_250_ap_return_33),
    .ap_ce(grp_stitchInPhi_fu_250_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_0_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((link_in_0_V_data_V_0_ack_out == 1'b1) & (link_in_0_V_data_V_0_vld_out == 1'b1))) begin
            link_in_0_V_data_V_0_sel_rd <= ~link_in_0_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_0_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((link_in_0_V_data_V_0_ack_in == 1'b1) & (link_in_0_V_data_V_0_vld_in == 1'b1))) begin
            link_in_0_V_data_V_0_sel_wr <= ~link_in_0_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_0_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_0_V_data_V_0_state == 2'd2) & (link_in_0_V_data_V_0_vld_in == 1'b0)) | ((link_in_0_V_data_V_0_state == 2'd3) & (link_in_0_V_data_V_0_vld_in == 1'b0) & (link_in_0_V_data_V_0_ack_out == 1'b1)))) begin
            link_in_0_V_data_V_0_state <= 2'd2;
        end else if ((((link_in_0_V_data_V_0_state == 2'd3) & (link_in_0_V_data_V_0_ack_out == 1'b0) & (link_in_0_V_data_V_0_vld_in == 1'b1)) | ((link_in_0_V_data_V_0_state == 2'd1) & (link_in_0_V_data_V_0_ack_out == 1'b0)))) begin
            link_in_0_V_data_V_0_state <= 2'd1;
        end else if ((((link_in_0_V_data_V_0_state == 2'd2) & (link_in_0_V_data_V_0_vld_in == 1'b1)) | (~((link_in_0_V_data_V_0_vld_in == 1'b0) & (link_in_0_V_data_V_0_ack_out == 1'b1)) & ~((link_in_0_V_data_V_0_ack_out == 1'b0) & (link_in_0_V_data_V_0_vld_in == 1'b1)) & (link_in_0_V_data_V_0_state == 2'd3)) | ((link_in_0_V_data_V_0_state == 2'd1) & (link_in_0_V_data_V_0_ack_out == 1'b1)))) begin
            link_in_0_V_data_V_0_state <= 2'd3;
        end else begin
            link_in_0_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_0_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_0_V_last_V_0_state == 2'd2) & (link_in_0_V_last_V_0_vld_in == 1'b0)) | ((link_in_0_V_last_V_0_state == 2'd3) & (link_in_0_V_last_V_0_vld_in == 1'b0) & (link_in_0_V_last_V_0_ack_out == 1'b1)))) begin
            link_in_0_V_last_V_0_state <= 2'd2;
        end else if ((((link_in_0_V_last_V_0_state == 2'd1) & (link_in_0_V_last_V_0_ack_out == 1'b0)) | ((link_in_0_V_last_V_0_state == 2'd3) & (link_in_0_V_last_V_0_ack_out == 1'b0) & (link_in_0_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_0_V_last_V_0_state <= 2'd1;
        end else if (((~((link_in_0_V_last_V_0_vld_in == 1'b0) & (link_in_0_V_last_V_0_ack_out == 1'b1)) & ~((link_in_0_V_last_V_0_ack_out == 1'b0) & (link_in_0_V_last_V_0_vld_in == 1'b1)) & (link_in_0_V_last_V_0_state == 2'd3)) | ((link_in_0_V_last_V_0_state == 2'd1) & (link_in_0_V_last_V_0_ack_out == 1'b1)) | ((link_in_0_V_last_V_0_state == 2'd2) & (link_in_0_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_0_V_last_V_0_state <= 2'd3;
        end else begin
            link_in_0_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_1_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((link_in_1_V_data_V_0_ack_out == 1'b1) & (link_in_1_V_data_V_0_vld_out == 1'b1))) begin
            link_in_1_V_data_V_0_sel_rd <= ~link_in_1_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_1_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((link_in_1_V_data_V_0_ack_in == 1'b1) & (link_in_1_V_data_V_0_vld_in == 1'b1))) begin
            link_in_1_V_data_V_0_sel_wr <= ~link_in_1_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_1_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_1_V_data_V_0_state == 2'd2) & (link_in_1_V_data_V_0_vld_in == 1'b0)) | ((link_in_1_V_data_V_0_state == 2'd3) & (link_in_1_V_data_V_0_vld_in == 1'b0) & (link_in_1_V_data_V_0_ack_out == 1'b1)))) begin
            link_in_1_V_data_V_0_state <= 2'd2;
        end else if ((((link_in_1_V_data_V_0_state == 2'd1) & (link_in_1_V_data_V_0_ack_out == 1'b0)) | ((link_in_1_V_data_V_0_state == 2'd3) & (link_in_1_V_data_V_0_ack_out == 1'b0) & (link_in_1_V_data_V_0_vld_in == 1'b1)))) begin
            link_in_1_V_data_V_0_state <= 2'd1;
        end else if (((~((link_in_1_V_data_V_0_vld_in == 1'b0) & (link_in_1_V_data_V_0_ack_out == 1'b1)) & ~((link_in_1_V_data_V_0_ack_out == 1'b0) & (link_in_1_V_data_V_0_vld_in == 1'b1)) & (link_in_1_V_data_V_0_state == 2'd3)) | ((link_in_1_V_data_V_0_state == 2'd1) & (link_in_1_V_data_V_0_ack_out == 1'b1)) | ((link_in_1_V_data_V_0_state == 2'd2) & (link_in_1_V_data_V_0_vld_in == 1'b1)))) begin
            link_in_1_V_data_V_0_state <= 2'd3;
        end else begin
            link_in_1_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_1_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_1_V_last_V_0_state == 2'd2) & (link_in_1_V_last_V_0_vld_in == 1'b0)) | ((link_in_1_V_last_V_0_state == 2'd3) & (link_in_1_V_last_V_0_vld_in == 1'b0) & (link_in_1_V_last_V_0_ack_out == 1'b1)))) begin
            link_in_1_V_last_V_0_state <= 2'd2;
        end else if ((((link_in_1_V_last_V_0_state == 2'd1) & (link_in_1_V_last_V_0_ack_out == 1'b0)) | ((link_in_1_V_last_V_0_state == 2'd3) & (link_in_1_V_last_V_0_ack_out == 1'b0) & (link_in_1_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_1_V_last_V_0_state <= 2'd1;
        end else if (((~((link_in_1_V_last_V_0_vld_in == 1'b0) & (link_in_1_V_last_V_0_ack_out == 1'b1)) & ~((link_in_1_V_last_V_0_ack_out == 1'b0) & (link_in_1_V_last_V_0_vld_in == 1'b1)) & (link_in_1_V_last_V_0_state == 2'd3)) | ((link_in_1_V_last_V_0_state == 2'd1) & (link_in_1_V_last_V_0_ack_out == 1'b1)) | ((link_in_1_V_last_V_0_state == 2'd2) & (link_in_1_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_1_V_last_V_0_state <= 2'd3;
        end else begin
            link_in_1_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_2_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((link_in_2_V_data_V_0_ack_out == 1'b1) & (link_in_2_V_data_V_0_vld_out == 1'b1))) begin
            link_in_2_V_data_V_0_sel_rd <= ~link_in_2_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_2_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((link_in_2_V_data_V_0_ack_in == 1'b1) & (link_in_2_V_data_V_0_vld_in == 1'b1))) begin
            link_in_2_V_data_V_0_sel_wr <= ~link_in_2_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_2_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_2_V_data_V_0_state == 2'd2) & (link_in_2_V_data_V_0_vld_in == 1'b0)) | ((link_in_2_V_data_V_0_state == 2'd3) & (link_in_2_V_data_V_0_vld_in == 1'b0) & (link_in_2_V_data_V_0_ack_out == 1'b1)))) begin
            link_in_2_V_data_V_0_state <= 2'd2;
        end else if ((((link_in_2_V_data_V_0_state == 2'd1) & (link_in_2_V_data_V_0_ack_out == 1'b0)) | ((link_in_2_V_data_V_0_state == 2'd3) & (link_in_2_V_data_V_0_ack_out == 1'b0) & (link_in_2_V_data_V_0_vld_in == 1'b1)))) begin
            link_in_2_V_data_V_0_state <= 2'd1;
        end else if (((~((link_in_2_V_data_V_0_vld_in == 1'b0) & (link_in_2_V_data_V_0_ack_out == 1'b1)) & ~((link_in_2_V_data_V_0_ack_out == 1'b0) & (link_in_2_V_data_V_0_vld_in == 1'b1)) & (link_in_2_V_data_V_0_state == 2'd3)) | ((link_in_2_V_data_V_0_state == 2'd1) & (link_in_2_V_data_V_0_ack_out == 1'b1)) | ((link_in_2_V_data_V_0_state == 2'd2) & (link_in_2_V_data_V_0_vld_in == 1'b1)))) begin
            link_in_2_V_data_V_0_state <= 2'd3;
        end else begin
            link_in_2_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_2_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_2_V_last_V_0_state == 2'd2) & (link_in_2_V_last_V_0_vld_in == 1'b0)) | ((link_in_2_V_last_V_0_state == 2'd3) & (link_in_2_V_last_V_0_vld_in == 1'b0) & (link_in_2_V_last_V_0_ack_out == 1'b1)))) begin
            link_in_2_V_last_V_0_state <= 2'd2;
        end else if ((((link_in_2_V_last_V_0_state == 2'd1) & (link_in_2_V_last_V_0_ack_out == 1'b0)) | ((link_in_2_V_last_V_0_state == 2'd3) & (link_in_2_V_last_V_0_ack_out == 1'b0) & (link_in_2_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_2_V_last_V_0_state <= 2'd1;
        end else if (((~((link_in_2_V_last_V_0_vld_in == 1'b0) & (link_in_2_V_last_V_0_ack_out == 1'b1)) & ~((link_in_2_V_last_V_0_ack_out == 1'b0) & (link_in_2_V_last_V_0_vld_in == 1'b1)) & (link_in_2_V_last_V_0_state == 2'd3)) | ((link_in_2_V_last_V_0_state == 2'd1) & (link_in_2_V_last_V_0_ack_out == 1'b1)) | ((link_in_2_V_last_V_0_state == 2'd2) & (link_in_2_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_2_V_last_V_0_state <= 2'd3;
        end else begin
            link_in_2_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_3_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((link_in_3_V_data_V_0_ack_out == 1'b1) & (link_in_3_V_data_V_0_vld_out == 1'b1))) begin
            link_in_3_V_data_V_0_sel_rd <= ~link_in_3_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_3_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((link_in_3_V_data_V_0_ack_in == 1'b1) & (link_in_3_V_data_V_0_vld_in == 1'b1))) begin
            link_in_3_V_data_V_0_sel_wr <= ~link_in_3_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_3_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_3_V_data_V_0_state == 2'd2) & (link_in_3_V_data_V_0_vld_in == 1'b0)) | ((link_in_3_V_data_V_0_state == 2'd3) & (link_in_3_V_data_V_0_vld_in == 1'b0) & (link_in_3_V_data_V_0_ack_out == 1'b1)))) begin
            link_in_3_V_data_V_0_state <= 2'd2;
        end else if ((((link_in_3_V_data_V_0_state == 2'd1) & (link_in_3_V_data_V_0_ack_out == 1'b0)) | ((link_in_3_V_data_V_0_state == 2'd3) & (link_in_3_V_data_V_0_ack_out == 1'b0) & (link_in_3_V_data_V_0_vld_in == 1'b1)))) begin
            link_in_3_V_data_V_0_state <= 2'd1;
        end else if (((~((link_in_3_V_data_V_0_vld_in == 1'b0) & (link_in_3_V_data_V_0_ack_out == 1'b1)) & ~((link_in_3_V_data_V_0_ack_out == 1'b0) & (link_in_3_V_data_V_0_vld_in == 1'b1)) & (link_in_3_V_data_V_0_state == 2'd3)) | ((link_in_3_V_data_V_0_state == 2'd1) & (link_in_3_V_data_V_0_ack_out == 1'b1)) | ((link_in_3_V_data_V_0_state == 2'd2) & (link_in_3_V_data_V_0_vld_in == 1'b1)))) begin
            link_in_3_V_data_V_0_state <= 2'd3;
        end else begin
            link_in_3_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_in_3_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((link_in_3_V_last_V_0_state == 2'd2) & (link_in_3_V_last_V_0_vld_in == 1'b0)) | ((link_in_3_V_last_V_0_state == 2'd3) & (link_in_3_V_last_V_0_vld_in == 1'b0) & (link_in_3_V_last_V_0_ack_out == 1'b1)))) begin
            link_in_3_V_last_V_0_state <= 2'd2;
        end else if ((((link_in_3_V_last_V_0_state == 2'd1) & (link_in_3_V_last_V_0_ack_out == 1'b0)) | ((link_in_3_V_last_V_0_state == 2'd3) & (link_in_3_V_last_V_0_ack_out == 1'b0) & (link_in_3_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_3_V_last_V_0_state <= 2'd1;
        end else if (((~((link_in_3_V_last_V_0_vld_in == 1'b0) & (link_in_3_V_last_V_0_ack_out == 1'b1)) & ~((link_in_3_V_last_V_0_ack_out == 1'b0) & (link_in_3_V_last_V_0_vld_in == 1'b1)) & (link_in_3_V_last_V_0_state == 2'd3)) | ((link_in_3_V_last_V_0_state == 2'd1) & (link_in_3_V_last_V_0_ack_out == 1'b1)) | ((link_in_3_V_last_V_0_state == 2'd2) & (link_in_3_V_last_V_0_vld_in == 1'b1)))) begin
            link_in_3_V_last_V_0_state <= 2'd3;
        end else begin
            link_in_3_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_0_V_data_V_1_ack_out == 1'b1) & (link_out_0_V_data_V_1_vld_out == 1'b1))) begin
            link_out_0_V_data_V_1_sel_rd <= ~link_out_0_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((link_out_0_V_data_V_1_vld_in == 1'b1) & (link_out_0_V_data_V_1_ack_in == 1'b1))) begin
            link_out_0_V_data_V_1_sel_wr <= ~link_out_0_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_0_V_data_V_1_state == 2'd2) & (link_out_0_V_data_V_1_vld_in == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_V_data_V_1_vld_in == 1'b0) & (link_out_0_V_data_V_1_ack_out == 1'b1)))) begin
            link_out_0_V_data_V_1_state <= 2'd2;
        end else if ((((link_out_0_V_data_V_1_state == 2'd1) & (link_out_0_TREADY == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0) & (link_out_0_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_0_V_data_V_1_state <= 2'd1;
        end else if (((~((link_out_0_V_data_V_1_vld_in == 1'b0) & (link_out_0_V_data_V_1_ack_out == 1'b1)) & ~((link_out_0_TREADY == 1'b0) & (link_out_0_V_data_V_1_vld_in == 1'b1)) & (link_out_0_V_data_V_1_state == 2'd3)) | ((link_out_0_V_data_V_1_state == 2'd1) & (link_out_0_V_data_V_1_ack_out == 1'b1)) | ((link_out_0_V_data_V_1_state == 2'd2) & (link_out_0_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_0_V_data_V_1_state <= 2'd3;
        end else begin
            link_out_0_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_0_V_last_V_1_ack_out == 1'b1) & (link_out_0_V_last_V_1_vld_out == 1'b1))) begin
            link_out_0_V_last_V_1_sel_rd <= ~link_out_0_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_0_V_last_V_1_state == 2'd2) & (link_out_0_V_last_V_1_vld_in == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_V_last_V_1_vld_in == 1'b0) & (link_out_0_V_last_V_1_ack_out == 1'b1)))) begin
            link_out_0_V_last_V_1_state <= 2'd2;
        end else if ((((link_out_0_V_last_V_1_state == 2'd1) & (link_out_0_TREADY == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0) & (link_out_0_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_0_V_last_V_1_state <= 2'd1;
        end else if (((~((link_out_0_V_last_V_1_vld_in == 1'b0) & (link_out_0_V_last_V_1_ack_out == 1'b1)) & ~((link_out_0_TREADY == 1'b0) & (link_out_0_V_last_V_1_vld_in == 1'b1)) & (link_out_0_V_last_V_1_state == 2'd3)) | ((link_out_0_V_last_V_1_state == 2'd1) & (link_out_0_V_last_V_1_ack_out == 1'b1)) | ((link_out_0_V_last_V_1_state == 2'd2) & (link_out_0_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_0_V_last_V_1_state <= 2'd3;
        end else begin
            link_out_0_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_0_V_user_V_1_ack_out == 1'b1) & (link_out_0_V_user_V_1_vld_out == 1'b1))) begin
            link_out_0_V_user_V_1_sel_rd <= ~link_out_0_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_0_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_0_V_user_V_1_state == 2'd2) & (link_out_0_V_user_V_1_vld_in == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_V_user_V_1_vld_in == 1'b0) & (link_out_0_V_user_V_1_ack_out == 1'b1)))) begin
            link_out_0_V_user_V_1_state <= 2'd2;
        end else if ((((link_out_0_V_user_V_1_state == 2'd1) & (link_out_0_TREADY == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0) & (link_out_0_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_0_V_user_V_1_state <= 2'd1;
        end else if (((~((link_out_0_V_user_V_1_vld_in == 1'b0) & (link_out_0_V_user_V_1_ack_out == 1'b1)) & ~((link_out_0_TREADY == 1'b0) & (link_out_0_V_user_V_1_vld_in == 1'b1)) & (link_out_0_V_user_V_1_state == 2'd3)) | ((link_out_0_V_user_V_1_state == 2'd1) & (link_out_0_V_user_V_1_ack_out == 1'b1)) | ((link_out_0_V_user_V_1_state == 2'd2) & (link_out_0_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_0_V_user_V_1_state <= 2'd3;
        end else begin
            link_out_0_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_1_V_data_V_1_ack_out == 1'b1) & (link_out_1_V_data_V_1_vld_out == 1'b1))) begin
            link_out_1_V_data_V_1_sel_rd <= ~link_out_1_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((link_out_1_V_data_V_1_vld_in == 1'b1) & (link_out_1_V_data_V_1_ack_in == 1'b1))) begin
            link_out_1_V_data_V_1_sel_wr <= ~link_out_1_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_1_V_data_V_1_state == 2'd2) & (link_out_1_V_data_V_1_vld_in == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_V_data_V_1_vld_in == 1'b0) & (link_out_1_V_data_V_1_ack_out == 1'b1)))) begin
            link_out_1_V_data_V_1_state <= 2'd2;
        end else if ((((link_out_1_V_data_V_1_state == 2'd1) & (link_out_1_TREADY == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0) & (link_out_1_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_1_V_data_V_1_state <= 2'd1;
        end else if (((~((link_out_1_V_data_V_1_vld_in == 1'b0) & (link_out_1_V_data_V_1_ack_out == 1'b1)) & ~((link_out_1_TREADY == 1'b0) & (link_out_1_V_data_V_1_vld_in == 1'b1)) & (link_out_1_V_data_V_1_state == 2'd3)) | ((link_out_1_V_data_V_1_state == 2'd1) & (link_out_1_V_data_V_1_ack_out == 1'b1)) | ((link_out_1_V_data_V_1_state == 2'd2) & (link_out_1_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_1_V_data_V_1_state <= 2'd3;
        end else begin
            link_out_1_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_1_V_last_V_1_ack_out == 1'b1) & (link_out_1_V_last_V_1_vld_out == 1'b1))) begin
            link_out_1_V_last_V_1_sel_rd <= ~link_out_1_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_1_V_last_V_1_state == 2'd2) & (link_out_1_V_last_V_1_vld_in == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_V_last_V_1_vld_in == 1'b0) & (link_out_1_V_last_V_1_ack_out == 1'b1)))) begin
            link_out_1_V_last_V_1_state <= 2'd2;
        end else if ((((link_out_1_V_last_V_1_state == 2'd1) & (link_out_1_TREADY == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0) & (link_out_1_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_1_V_last_V_1_state <= 2'd1;
        end else if (((~((link_out_1_V_last_V_1_vld_in == 1'b0) & (link_out_1_V_last_V_1_ack_out == 1'b1)) & ~((link_out_1_TREADY == 1'b0) & (link_out_1_V_last_V_1_vld_in == 1'b1)) & (link_out_1_V_last_V_1_state == 2'd3)) | ((link_out_1_V_last_V_1_state == 2'd1) & (link_out_1_V_last_V_1_ack_out == 1'b1)) | ((link_out_1_V_last_V_1_state == 2'd2) & (link_out_1_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_1_V_last_V_1_state <= 2'd3;
        end else begin
            link_out_1_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_1_V_user_V_1_ack_out == 1'b1) & (link_out_1_V_user_V_1_vld_out == 1'b1))) begin
            link_out_1_V_user_V_1_sel_rd <= ~link_out_1_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_1_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_1_V_user_V_1_state == 2'd2) & (link_out_1_V_user_V_1_vld_in == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_V_user_V_1_vld_in == 1'b0) & (link_out_1_V_user_V_1_ack_out == 1'b1)))) begin
            link_out_1_V_user_V_1_state <= 2'd2;
        end else if ((((link_out_1_V_user_V_1_state == 2'd1) & (link_out_1_TREADY == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0) & (link_out_1_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_1_V_user_V_1_state <= 2'd1;
        end else if (((~((link_out_1_V_user_V_1_vld_in == 1'b0) & (link_out_1_V_user_V_1_ack_out == 1'b1)) & ~((link_out_1_TREADY == 1'b0) & (link_out_1_V_user_V_1_vld_in == 1'b1)) & (link_out_1_V_user_V_1_state == 2'd3)) | ((link_out_1_V_user_V_1_state == 2'd1) & (link_out_1_V_user_V_1_ack_out == 1'b1)) | ((link_out_1_V_user_V_1_state == 2'd2) & (link_out_1_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_1_V_user_V_1_state <= 2'd3;
        end else begin
            link_out_1_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_2_V_data_V_1_ack_out == 1'b1) & (link_out_2_V_data_V_1_vld_out == 1'b1))) begin
            link_out_2_V_data_V_1_sel_rd <= ~link_out_2_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((link_out_2_V_data_V_1_vld_in == 1'b1) & (link_out_2_V_data_V_1_ack_in == 1'b1))) begin
            link_out_2_V_data_V_1_sel_wr <= ~link_out_2_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_2_V_data_V_1_state == 2'd2) & (link_out_2_V_data_V_1_vld_in == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_V_data_V_1_vld_in == 1'b0) & (link_out_2_V_data_V_1_ack_out == 1'b1)))) begin
            link_out_2_V_data_V_1_state <= 2'd2;
        end else if ((((link_out_2_V_data_V_1_state == 2'd1) & (link_out_2_TREADY == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0) & (link_out_2_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_2_V_data_V_1_state <= 2'd1;
        end else if (((~((link_out_2_V_data_V_1_vld_in == 1'b0) & (link_out_2_V_data_V_1_ack_out == 1'b1)) & ~((link_out_2_TREADY == 1'b0) & (link_out_2_V_data_V_1_vld_in == 1'b1)) & (link_out_2_V_data_V_1_state == 2'd3)) | ((link_out_2_V_data_V_1_state == 2'd1) & (link_out_2_V_data_V_1_ack_out == 1'b1)) | ((link_out_2_V_data_V_1_state == 2'd2) & (link_out_2_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_2_V_data_V_1_state <= 2'd3;
        end else begin
            link_out_2_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_2_V_last_V_1_ack_out == 1'b1) & (link_out_2_V_last_V_1_vld_out == 1'b1))) begin
            link_out_2_V_last_V_1_sel_rd <= ~link_out_2_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_2_V_last_V_1_state == 2'd2) & (link_out_2_V_last_V_1_vld_in == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_V_last_V_1_vld_in == 1'b0) & (link_out_2_V_last_V_1_ack_out == 1'b1)))) begin
            link_out_2_V_last_V_1_state <= 2'd2;
        end else if ((((link_out_2_V_last_V_1_state == 2'd1) & (link_out_2_TREADY == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0) & (link_out_2_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_2_V_last_V_1_state <= 2'd1;
        end else if (((~((link_out_2_V_last_V_1_vld_in == 1'b0) & (link_out_2_V_last_V_1_ack_out == 1'b1)) & ~((link_out_2_TREADY == 1'b0) & (link_out_2_V_last_V_1_vld_in == 1'b1)) & (link_out_2_V_last_V_1_state == 2'd3)) | ((link_out_2_V_last_V_1_state == 2'd1) & (link_out_2_V_last_V_1_ack_out == 1'b1)) | ((link_out_2_V_last_V_1_state == 2'd2) & (link_out_2_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_2_V_last_V_1_state <= 2'd3;
        end else begin
            link_out_2_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_2_V_user_V_1_ack_out == 1'b1) & (link_out_2_V_user_V_1_vld_out == 1'b1))) begin
            link_out_2_V_user_V_1_sel_rd <= ~link_out_2_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_2_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_2_V_user_V_1_state == 2'd2) & (link_out_2_V_user_V_1_vld_in == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_V_user_V_1_vld_in == 1'b0) & (link_out_2_V_user_V_1_ack_out == 1'b1)))) begin
            link_out_2_V_user_V_1_state <= 2'd2;
        end else if ((((link_out_2_V_user_V_1_state == 2'd1) & (link_out_2_TREADY == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0) & (link_out_2_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_2_V_user_V_1_state <= 2'd1;
        end else if (((~((link_out_2_V_user_V_1_vld_in == 1'b0) & (link_out_2_V_user_V_1_ack_out == 1'b1)) & ~((link_out_2_TREADY == 1'b0) & (link_out_2_V_user_V_1_vld_in == 1'b1)) & (link_out_2_V_user_V_1_state == 2'd3)) | ((link_out_2_V_user_V_1_state == 2'd1) & (link_out_2_V_user_V_1_ack_out == 1'b1)) | ((link_out_2_V_user_V_1_state == 2'd2) & (link_out_2_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_2_V_user_V_1_state <= 2'd3;
        end else begin
            link_out_2_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_3_V_data_V_1_ack_out == 1'b1) & (link_out_3_V_data_V_1_vld_out == 1'b1))) begin
            link_out_3_V_data_V_1_sel_rd <= ~link_out_3_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((link_out_3_V_data_V_1_vld_in == 1'b1) & (link_out_3_V_data_V_1_ack_in == 1'b1))) begin
            link_out_3_V_data_V_1_sel_wr <= ~link_out_3_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_3_V_data_V_1_state == 2'd2) & (link_out_3_V_data_V_1_vld_in == 1'b0)) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_V_data_V_1_vld_in == 1'b0) & (link_out_3_V_data_V_1_ack_out == 1'b1)))) begin
            link_out_3_V_data_V_1_state <= 2'd2;
        end else if ((((link_out_3_V_data_V_1_state == 2'd1) & (link_out_3_TREADY == 1'b0)) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0) & (link_out_3_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_3_V_data_V_1_state <= 2'd1;
        end else if (((~((link_out_3_V_data_V_1_vld_in == 1'b0) & (link_out_3_V_data_V_1_ack_out == 1'b1)) & ~((link_out_3_TREADY == 1'b0) & (link_out_3_V_data_V_1_vld_in == 1'b1)) & (link_out_3_V_data_V_1_state == 2'd3)) | ((link_out_3_V_data_V_1_state == 2'd1) & (link_out_3_V_data_V_1_ack_out == 1'b1)) | ((link_out_3_V_data_V_1_state == 2'd2) & (link_out_3_V_data_V_1_vld_in == 1'b1)))) begin
            link_out_3_V_data_V_1_state <= 2'd3;
        end else begin
            link_out_3_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_3_V_last_V_1_ack_out == 1'b1) & (link_out_3_V_last_V_1_vld_out == 1'b1))) begin
            link_out_3_V_last_V_1_sel_rd <= ~link_out_3_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_3_V_last_V_1_state == 2'd2) & (link_out_3_V_last_V_1_vld_in == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_V_last_V_1_vld_in == 1'b0) & (link_out_3_V_last_V_1_ack_out == 1'b1)))) begin
            link_out_3_V_last_V_1_state <= 2'd2;
        end else if ((((link_out_3_V_last_V_1_state == 2'd1) & (link_out_3_TREADY == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0) & (link_out_3_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_3_V_last_V_1_state <= 2'd1;
        end else if (((~((link_out_3_V_last_V_1_vld_in == 1'b0) & (link_out_3_V_last_V_1_ack_out == 1'b1)) & ~((link_out_3_TREADY == 1'b0) & (link_out_3_V_last_V_1_vld_in == 1'b1)) & (link_out_3_V_last_V_1_state == 2'd3)) | ((link_out_3_V_last_V_1_state == 2'd1) & (link_out_3_V_last_V_1_ack_out == 1'b1)) | ((link_out_3_V_last_V_1_state == 2'd2) & (link_out_3_V_last_V_1_vld_in == 1'b1)))) begin
            link_out_3_V_last_V_1_state <= 2'd3;
        end else begin
            link_out_3_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((link_out_3_V_user_V_1_ack_out == 1'b1) & (link_out_3_V_user_V_1_vld_out == 1'b1))) begin
            link_out_3_V_user_V_1_sel_rd <= ~link_out_3_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        link_out_3_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((link_out_3_V_user_V_1_state == 2'd2) & (link_out_3_V_user_V_1_vld_in == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_V_user_V_1_vld_in == 1'b0) & (link_out_3_V_user_V_1_ack_out == 1'b1)))) begin
            link_out_3_V_user_V_1_state <= 2'd2;
        end else if ((((link_out_3_V_user_V_1_state == 2'd1) & (link_out_3_TREADY == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0) & (link_out_3_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_3_V_user_V_1_state <= 2'd1;
        end else if (((~((link_out_3_V_user_V_1_vld_in == 1'b0) & (link_out_3_V_user_V_1_ack_out == 1'b1)) & ~((link_out_3_TREADY == 1'b0) & (link_out_3_V_user_V_1_vld_in == 1'b1)) & (link_out_3_V_user_V_1_state == 2'd3)) | ((link_out_3_V_user_V_1_state == 2'd1) & (link_out_3_V_user_V_1_ack_out == 1'b1)) | ((link_out_3_V_user_V_1_state == 2'd2) & (link_out_3_V_user_V_1_vld_in == 1'b1)))) begin
            link_out_3_V_user_V_1_state <= 2'd3;
        end else begin
            link_out_3_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_0_V_data_V_0_load_A == 1'b1)) begin
        link_in_0_V_data_V_0_payload_A <= link_in_0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_0_V_data_V_0_load_B == 1'b1)) begin
        link_in_0_V_data_V_0_payload_B <= link_in_0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_1_V_data_V_0_load_A == 1'b1)) begin
        link_in_1_V_data_V_0_payload_A <= link_in_1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_1_V_data_V_0_load_B == 1'b1)) begin
        link_in_1_V_data_V_0_payload_B <= link_in_1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_2_V_data_V_0_load_A == 1'b1)) begin
        link_in_2_V_data_V_0_payload_A <= link_in_2_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_2_V_data_V_0_load_B == 1'b1)) begin
        link_in_2_V_data_V_0_payload_B <= link_in_2_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_3_V_data_V_0_load_A == 1'b1)) begin
        link_in_3_V_data_V_0_payload_A <= link_in_3_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_in_3_V_data_V_0_load_B == 1'b1)) begin
        link_in_3_V_data_V_0_payload_B <= link_in_3_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_0_V_data_V_1_load_A == 1'b1)) begin
        link_out_0_V_data_V_1_payload_A <= tmp_data_V_3_reg_1042;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_0_V_data_V_1_load_B == 1'b1)) begin
        link_out_0_V_data_V_1_payload_B <= tmp_data_V_3_reg_1042;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_1_V_data_V_1_load_A == 1'b1)) begin
        link_out_1_V_data_V_1_payload_A <= tmp_data_V_4_fu_840_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_1_V_data_V_1_load_B == 1'b1)) begin
        link_out_1_V_data_V_1_payload_B <= tmp_data_V_4_fu_840_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_2_V_data_V_1_load_A == 1'b1)) begin
        link_out_2_V_data_V_1_payload_A <= tmp_data_V_5_fu_890_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_2_V_data_V_1_load_B == 1'b1)) begin
        link_out_2_V_data_V_1_payload_B <= tmp_data_V_5_fu_890_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_3_V_data_V_1_load_A == 1'b1)) begin
        link_out_3_V_data_V_1_payload_A <= tmp_data_V_7_reg_1049;
    end
end

always @ (posedge ap_clk) begin
    if ((link_out_3_V_data_V_1_load_B == 1'b1)) begin
        link_out_3_V_data_V_1_payload_B <= tmp_data_V_7_reg_1049;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_3_reg_1042 <= link_in_0_V_data_V_0_data_out;
        tmp_data_V_7_reg_1049 <= link_in_3_V_data_V_0_data_out;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp55)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp46)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp54)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp53)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp52)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp51)))) begin
        grp_stitchInPhi_fu_250_ap_ce = 1'b1;
    end else begin
        grp_stitchInPhi_fu_250_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1))) begin
        grp_stitchInPhi_fu_250_ap_start = 1'b1;
    end else begin
        grp_stitchInPhi_fu_250_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1))) begin
        link_in_0_TDATA_blk_n = link_in_0_V_data_V_0_state[1'd0];
    end else begin
        link_in_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_0_V_data_V_0_ack_out = 1'b1;
    end else begin
        link_in_0_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((link_in_0_V_data_V_0_sel == 1'b1)) begin
        link_in_0_V_data_V_0_data_out = link_in_0_V_data_V_0_payload_B;
    end else begin
        link_in_0_V_data_V_0_data_out = link_in_0_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_0_V_last_V_0_ack_out = 1'b1;
    end else begin
        link_in_0_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1))) begin
        link_in_1_TDATA_blk_n = link_in_1_V_data_V_0_state[1'd0];
    end else begin
        link_in_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_1_V_data_V_0_ack_out = 1'b1;
    end else begin
        link_in_1_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((link_in_1_V_data_V_0_sel == 1'b1)) begin
        link_in_1_V_data_V_0_data_out = link_in_1_V_data_V_0_payload_B;
    end else begin
        link_in_1_V_data_V_0_data_out = link_in_1_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_1_V_last_V_0_ack_out = 1'b1;
    end else begin
        link_in_1_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1))) begin
        link_in_2_TDATA_blk_n = link_in_2_V_data_V_0_state[1'd0];
    end else begin
        link_in_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_2_V_data_V_0_ack_out = 1'b1;
    end else begin
        link_in_2_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((link_in_2_V_data_V_0_sel == 1'b1)) begin
        link_in_2_V_data_V_0_data_out = link_in_2_V_data_V_0_payload_B;
    end else begin
        link_in_2_V_data_V_0_data_out = link_in_2_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_2_V_last_V_0_ack_out = 1'b1;
    end else begin
        link_in_2_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1))) begin
        link_in_3_TDATA_blk_n = link_in_3_V_data_V_0_state[1'd0];
    end else begin
        link_in_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_3_V_data_V_0_ack_out = 1'b1;
    end else begin
        link_in_3_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((link_in_3_V_data_V_0_sel == 1'b1)) begin
        link_in_3_V_data_V_0_data_out = link_in_3_V_data_V_0_payload_B;
    end else begin
        link_in_3_V_data_V_0_data_out = link_in_3_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        link_in_3_V_last_V_0_ack_out = 1'b1;
    end else begin
        link_in_3_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        link_out_0_TDATA_blk_n = link_out_0_V_data_V_1_state[1'd1];
    end else begin
        link_out_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((link_out_0_V_data_V_1_sel == 1'b1)) begin
        link_out_0_V_data_V_1_data_out = link_out_0_V_data_V_1_payload_B;
    end else begin
        link_out_0_V_data_V_1_data_out = link_out_0_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_0_V_data_V_1_vld_in = 1'b1;
    end else begin
        link_out_0_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_0_V_last_V_1_vld_in = 1'b1;
    end else begin
        link_out_0_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_0_V_user_V_1_vld_in = 1'b1;
    end else begin
        link_out_0_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        link_out_1_TDATA_blk_n = link_out_1_V_data_V_1_state[1'd1];
    end else begin
        link_out_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((link_out_1_V_data_V_1_sel == 1'b1)) begin
        link_out_1_V_data_V_1_data_out = link_out_1_V_data_V_1_payload_B;
    end else begin
        link_out_1_V_data_V_1_data_out = link_out_1_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_1_V_data_V_1_vld_in = 1'b1;
    end else begin
        link_out_1_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_1_V_last_V_1_vld_in = 1'b1;
    end else begin
        link_out_1_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_1_V_user_V_1_vld_in = 1'b1;
    end else begin
        link_out_1_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        link_out_2_TDATA_blk_n = link_out_2_V_data_V_1_state[1'd1];
    end else begin
        link_out_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((link_out_2_V_data_V_1_sel == 1'b1)) begin
        link_out_2_V_data_V_1_data_out = link_out_2_V_data_V_1_payload_B;
    end else begin
        link_out_2_V_data_V_1_data_out = link_out_2_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_2_V_data_V_1_vld_in = 1'b1;
    end else begin
        link_out_2_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_2_V_last_V_1_vld_in = 1'b1;
    end else begin
        link_out_2_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_2_V_user_V_1_vld_in = 1'b1;
    end else begin
        link_out_2_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        link_out_3_TDATA_blk_n = link_out_3_V_data_V_1_state[1'd1];
    end else begin
        link_out_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((link_out_3_V_data_V_1_sel == 1'b1)) begin
        link_out_3_V_data_V_1_data_out = link_out_3_V_data_V_1_payload_B;
    end else begin
        link_out_3_V_data_V_1_data_out = link_out_3_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_3_V_data_V_1_vld_in = 1'b1;
    end else begin
        link_out_3_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_3_V_last_V_1_vld_in = 1'b1;
    end else begin
        link_out_3_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        link_out_3_V_user_V_1_vld_in = 1'b1;
    end else begin
        link_out_3_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((link_in_0_V_data_V_0_vld_out == 1'b0) | (link_in_3_V_data_V_0_vld_out == 1'b0) | (link_in_2_V_data_V_0_vld_out == 1'b0) | (link_in_1_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((link_out_3_V_data_V_1_state == 2'd1) | (link_out_2_V_data_V_1_state == 2'd1) | (link_out_1_V_data_V_1_state == 2'd1) | (link_out_0_V_data_V_1_state == 2'd1) | (link_out_3_V_last_V_1_state == 2'd1) | (link_out_2_V_last_V_1_state == 2'd1) | (link_out_1_V_last_V_1_state == 2'd1) | (link_out_0_V_last_V_1_state == 2'd1) | (link_out_3_V_user_V_1_state == 2'd1) | (link_out_2_V_user_V_1_state == 2'd1) | (link_out_1_V_user_V_1_state == 2'd1) | (link_out_0_V_user_V_1_state == 2'd1) | (1'b1 == ap_block_state7_io) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp46 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((link_in_0_V_data_V_0_vld_out == 1'b0) | (link_in_3_V_data_V_0_vld_out == 1'b0) | (link_in_2_V_data_V_0_vld_out == 1'b0) | (link_in_1_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((link_out_3_V_data_V_1_state == 2'd1) | (link_out_2_V_data_V_1_state == 2'd1) | (link_out_1_V_data_V_1_state == 2'd1) | (link_out_0_V_data_V_1_state == 2'd1) | (link_out_3_V_last_V_1_state == 2'd1) | (link_out_2_V_last_V_1_state == 2'd1) | (link_out_1_V_last_V_1_state == 2'd1) | (link_out_0_V_last_V_1_state == 2'd1) | (link_out_3_V_user_V_1_state == 2'd1) | (link_out_2_V_user_V_1_state == 2'd1) | (link_out_1_V_user_V_1_state == 2'd1) | (link_out_0_V_user_V_1_state == 2'd1) | (1'b1 == ap_block_state7_io) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((link_in_0_V_data_V_0_vld_out == 1'b0) | (link_in_3_V_data_V_0_vld_out == 1'b0) | (link_in_2_V_data_V_0_vld_out == 1'b0) | (link_in_1_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((link_out_3_V_data_V_1_state == 2'd1) | (link_out_2_V_data_V_1_state == 2'd1) | (link_out_1_V_data_V_1_state == 2'd1) | (link_out_0_V_data_V_1_state == 2'd1) | (link_out_3_V_last_V_1_state == 2'd1) | (link_out_2_V_last_V_1_state == 2'd1) | (link_out_1_V_last_V_1_state == 2'd1) | (link_out_0_V_last_V_1_state == 2'd1) | (link_out_3_V_user_V_1_state == 2'd1) | (link_out_2_V_user_V_1_state == 2'd1) | (link_out_1_V_user_V_1_state == 2'd1) | (link_out_0_V_user_V_1_state == 2'd1) | (1'b1 == ap_block_state7_io) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)))));
end

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp51 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp52 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp53 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp54 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001_ignoreCallOp55 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((link_in_0_V_data_V_0_vld_out == 1'b0) | (link_in_3_V_data_V_0_vld_out == 1'b0) | (link_in_2_V_data_V_0_vld_out == 1'b0) | (link_in_1_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call72 = ((link_in_0_V_data_V_0_vld_out == 1'b0) | (link_in_3_V_data_V_0_vld_out == 1'b0) | (link_in_2_V_data_V_0_vld_out == 1'b0) | (link_in_1_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call72 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call72 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call72 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call72 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((link_out_3_V_data_V_1_ack_in == 1'b0) | (link_out_2_V_data_V_1_ack_in == 1'b0) | (link_out_1_V_data_V_1_ack_in == 1'b0) | (link_out_0_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0_ignore_call72 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((link_out_3_V_data_V_1_ack_in == 1'b0) | (link_out_2_V_data_V_1_ack_in == 1'b0) | (link_out_1_V_data_V_1_ack_in == 1'b0) | (link_out_0_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((link_out_3_V_data_V_1_state == 2'd1) | (link_out_2_V_data_V_1_state == 2'd1) | (link_out_1_V_data_V_1_state == 2'd1) | (link_out_0_V_data_V_1_state == 2'd1) | (link_out_3_V_last_V_1_state == 2'd1) | (link_out_2_V_last_V_1_state == 2'd1) | (link_out_1_V_last_V_1_state == 2'd1) | (link_out_0_V_last_V_1_state == 2'd1) | (link_out_3_V_user_V_1_state == 2'd1) | (link_out_2_V_user_V_1_state == 2'd1) | (link_out_1_V_user_V_1_state == 2'd1) | (link_out_0_V_user_V_1_state == 2'd1) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1_ignore_call72 = ((link_out_3_V_data_V_1_state == 2'd1) | (link_out_2_V_data_V_1_state == 2'd1) | (link_out_1_V_data_V_1_state == 2'd1) | (link_out_0_V_data_V_1_state == 2'd1) | (link_out_3_V_last_V_1_state == 2'd1) | (link_out_2_V_last_V_1_state == 2'd1) | (link_out_1_V_last_V_1_state == 2'd1) | (link_out_0_V_last_V_1_state == 2'd1) | (link_out_3_V_user_V_1_state == 2'd1) | (link_out_2_V_user_V_1_state == 2'd1) | (link_out_1_V_user_V_1_state == 2'd1) | (link_out_0_V_user_V_1_state == 2'd1) | ((link_out_3_V_data_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_data_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_data_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_data_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_last_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_last_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_last_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_last_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)) | ((link_out_3_V_user_V_1_state == 2'd3) & (link_out_3_TREADY == 1'b0)) | ((link_out_2_V_user_V_1_state == 2'd3) & (link_out_2_TREADY == 1'b0)) | ((link_out_1_V_user_V_1_state == 2'd3) & (link_out_1_TREADY == 1'b0)) | ((link_out_0_V_user_V_1_state == 2'd3) & (link_out_0_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_stitchInPhi_fu_250_p_read = link_in_1_V_data_V_0_data_out[31:0];

assign grp_stitchInPhi_fu_250_p_read1 = {{link_in_1_V_data_V_0_data_out[63:32]}};

assign grp_stitchInPhi_fu_250_p_read10 = {{link_in_1_V_data_V_0_data_out[351:320]}};

assign grp_stitchInPhi_fu_250_p_read11 = {{link_in_1_V_data_V_0_data_out[383:352]}};

assign grp_stitchInPhi_fu_250_p_read12 = {{link_in_1_V_data_V_0_data_out[415:384]}};

assign grp_stitchInPhi_fu_250_p_read13 = {{link_in_1_V_data_V_0_data_out[447:416]}};

assign grp_stitchInPhi_fu_250_p_read14 = {{link_in_1_V_data_V_0_data_out[479:448]}};

assign grp_stitchInPhi_fu_250_p_read15 = {{link_in_1_V_data_V_0_data_out[511:480]}};

assign grp_stitchInPhi_fu_250_p_read16 = {{link_in_1_V_data_V_0_data_out[543:512]}};

assign grp_stitchInPhi_fu_250_p_read17 = link_in_2_V_data_V_0_data_out[31:0];

assign grp_stitchInPhi_fu_250_p_read18 = {{link_in_2_V_data_V_0_data_out[63:32]}};

assign grp_stitchInPhi_fu_250_p_read19 = {{link_in_2_V_data_V_0_data_out[95:64]}};

assign grp_stitchInPhi_fu_250_p_read2 = {{link_in_1_V_data_V_0_data_out[95:64]}};

assign grp_stitchInPhi_fu_250_p_read20 = {{link_in_2_V_data_V_0_data_out[127:96]}};

assign grp_stitchInPhi_fu_250_p_read21 = {{link_in_2_V_data_V_0_data_out[159:128]}};

assign grp_stitchInPhi_fu_250_p_read22 = {{link_in_2_V_data_V_0_data_out[191:160]}};

assign grp_stitchInPhi_fu_250_p_read23 = {{link_in_2_V_data_V_0_data_out[223:192]}};

assign grp_stitchInPhi_fu_250_p_read24 = {{link_in_2_V_data_V_0_data_out[255:224]}};

assign grp_stitchInPhi_fu_250_p_read25 = {{link_in_2_V_data_V_0_data_out[287:256]}};

assign grp_stitchInPhi_fu_250_p_read26 = {{link_in_2_V_data_V_0_data_out[319:288]}};

assign grp_stitchInPhi_fu_250_p_read27 = {{link_in_2_V_data_V_0_data_out[351:320]}};

assign grp_stitchInPhi_fu_250_p_read28 = {{link_in_2_V_data_V_0_data_out[383:352]}};

assign grp_stitchInPhi_fu_250_p_read29 = {{link_in_2_V_data_V_0_data_out[415:384]}};

assign grp_stitchInPhi_fu_250_p_read3 = {{link_in_1_V_data_V_0_data_out[127:96]}};

assign grp_stitchInPhi_fu_250_p_read30 = {{link_in_2_V_data_V_0_data_out[447:416]}};

assign grp_stitchInPhi_fu_250_p_read31 = {{link_in_2_V_data_V_0_data_out[479:448]}};

assign grp_stitchInPhi_fu_250_p_read32 = {{link_in_2_V_data_V_0_data_out[511:480]}};

assign grp_stitchInPhi_fu_250_p_read33 = {{link_in_2_V_data_V_0_data_out[543:512]}};

assign grp_stitchInPhi_fu_250_p_read4 = {{link_in_1_V_data_V_0_data_out[159:128]}};

assign grp_stitchInPhi_fu_250_p_read5 = {{link_in_1_V_data_V_0_data_out[191:160]}};

assign grp_stitchInPhi_fu_250_p_read6 = {{link_in_1_V_data_V_0_data_out[223:192]}};

assign grp_stitchInPhi_fu_250_p_read7 = {{link_in_1_V_data_V_0_data_out[255:224]}};

assign grp_stitchInPhi_fu_250_p_read8 = {{link_in_1_V_data_V_0_data_out[287:256]}};

assign grp_stitchInPhi_fu_250_p_read9 = {{link_in_1_V_data_V_0_data_out[319:288]}};

assign link_in_0_TREADY = link_in_0_V_last_V_0_state[1'd1];

assign link_in_0_V_data_V_0_ack_in = link_in_0_V_data_V_0_state[1'd1];

assign link_in_0_V_data_V_0_load_A = (link_in_0_V_data_V_0_state_cmp_full & ~link_in_0_V_data_V_0_sel_wr);

assign link_in_0_V_data_V_0_load_B = (link_in_0_V_data_V_0_state_cmp_full & link_in_0_V_data_V_0_sel_wr);

assign link_in_0_V_data_V_0_sel = link_in_0_V_data_V_0_sel_rd;

assign link_in_0_V_data_V_0_state_cmp_full = ((link_in_0_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign link_in_0_V_data_V_0_vld_in = link_in_0_TVALID;

assign link_in_0_V_data_V_0_vld_out = link_in_0_V_data_V_0_state[1'd0];

assign link_in_0_V_last_V_0_vld_in = link_in_0_TVALID;

assign link_in_1_TREADY = link_in_1_V_last_V_0_state[1'd1];

assign link_in_1_V_data_V_0_ack_in = link_in_1_V_data_V_0_state[1'd1];

assign link_in_1_V_data_V_0_load_A = (link_in_1_V_data_V_0_state_cmp_full & ~link_in_1_V_data_V_0_sel_wr);

assign link_in_1_V_data_V_0_load_B = (link_in_1_V_data_V_0_state_cmp_full & link_in_1_V_data_V_0_sel_wr);

assign link_in_1_V_data_V_0_sel = link_in_1_V_data_V_0_sel_rd;

assign link_in_1_V_data_V_0_state_cmp_full = ((link_in_1_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign link_in_1_V_data_V_0_vld_in = link_in_1_TVALID;

assign link_in_1_V_data_V_0_vld_out = link_in_1_V_data_V_0_state[1'd0];

assign link_in_1_V_last_V_0_vld_in = link_in_1_TVALID;

assign link_in_2_TREADY = link_in_2_V_last_V_0_state[1'd1];

assign link_in_2_V_data_V_0_ack_in = link_in_2_V_data_V_0_state[1'd1];

assign link_in_2_V_data_V_0_load_A = (link_in_2_V_data_V_0_state_cmp_full & ~link_in_2_V_data_V_0_sel_wr);

assign link_in_2_V_data_V_0_load_B = (link_in_2_V_data_V_0_state_cmp_full & link_in_2_V_data_V_0_sel_wr);

assign link_in_2_V_data_V_0_sel = link_in_2_V_data_V_0_sel_rd;

assign link_in_2_V_data_V_0_state_cmp_full = ((link_in_2_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign link_in_2_V_data_V_0_vld_in = link_in_2_TVALID;

assign link_in_2_V_data_V_0_vld_out = link_in_2_V_data_V_0_state[1'd0];

assign link_in_2_V_last_V_0_vld_in = link_in_2_TVALID;

assign link_in_3_TREADY = link_in_3_V_last_V_0_state[1'd1];

assign link_in_3_V_data_V_0_ack_in = link_in_3_V_data_V_0_state[1'd1];

assign link_in_3_V_data_V_0_load_A = (link_in_3_V_data_V_0_state_cmp_full & ~link_in_3_V_data_V_0_sel_wr);

assign link_in_3_V_data_V_0_load_B = (link_in_3_V_data_V_0_state_cmp_full & link_in_3_V_data_V_0_sel_wr);

assign link_in_3_V_data_V_0_sel = link_in_3_V_data_V_0_sel_rd;

assign link_in_3_V_data_V_0_state_cmp_full = ((link_in_3_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign link_in_3_V_data_V_0_vld_in = link_in_3_TVALID;

assign link_in_3_V_data_V_0_vld_out = link_in_3_V_data_V_0_state[1'd0];

assign link_in_3_V_last_V_0_vld_in = link_in_3_TVALID;

assign link_out_0_TDATA = link_out_0_V_data_V_1_data_out;

assign link_out_0_TLAST = link_out_0_V_last_V_1_data_out;

assign link_out_0_TUSER = link_out_0_V_user_V_1_data_out;

assign link_out_0_TVALID = link_out_0_V_last_V_1_state[1'd0];

assign link_out_0_V_data_V_1_ack_in = link_out_0_V_data_V_1_state[1'd1];

assign link_out_0_V_data_V_1_ack_out = link_out_0_TREADY;

assign link_out_0_V_data_V_1_load_A = (link_out_0_V_data_V_1_state_cmp_full & ~link_out_0_V_data_V_1_sel_wr);

assign link_out_0_V_data_V_1_load_B = (link_out_0_V_data_V_1_state_cmp_full & link_out_0_V_data_V_1_sel_wr);

assign link_out_0_V_data_V_1_sel = link_out_0_V_data_V_1_sel_rd;

assign link_out_0_V_data_V_1_state_cmp_full = ((link_out_0_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign link_out_0_V_data_V_1_vld_out = link_out_0_V_data_V_1_state[1'd0];

assign link_out_0_V_last_V_1_ack_out = link_out_0_TREADY;

assign link_out_0_V_last_V_1_data_out = 1'd1;

assign link_out_0_V_last_V_1_sel = link_out_0_V_last_V_1_sel_rd;

assign link_out_0_V_last_V_1_vld_out = link_out_0_V_last_V_1_state[1'd0];

assign link_out_0_V_user_V_1_ack_out = link_out_0_TREADY;

assign link_out_0_V_user_V_1_data_out = 8'd0;

assign link_out_0_V_user_V_1_sel = link_out_0_V_user_V_1_sel_rd;

assign link_out_0_V_user_V_1_vld_out = link_out_0_V_user_V_1_state[1'd0];

assign link_out_1_TDATA = link_out_1_V_data_V_1_data_out;

assign link_out_1_TLAST = link_out_1_V_last_V_1_data_out;

assign link_out_1_TUSER = link_out_1_V_user_V_1_data_out;

assign link_out_1_TVALID = link_out_1_V_last_V_1_state[1'd0];

assign link_out_1_V_data_V_1_ack_in = link_out_1_V_data_V_1_state[1'd1];

assign link_out_1_V_data_V_1_ack_out = link_out_1_TREADY;

assign link_out_1_V_data_V_1_load_A = (link_out_1_V_data_V_1_state_cmp_full & ~link_out_1_V_data_V_1_sel_wr);

assign link_out_1_V_data_V_1_load_B = (link_out_1_V_data_V_1_state_cmp_full & link_out_1_V_data_V_1_sel_wr);

assign link_out_1_V_data_V_1_sel = link_out_1_V_data_V_1_sel_rd;

assign link_out_1_V_data_V_1_state_cmp_full = ((link_out_1_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign link_out_1_V_data_V_1_vld_out = link_out_1_V_data_V_1_state[1'd0];

assign link_out_1_V_last_V_1_ack_out = link_out_1_TREADY;

assign link_out_1_V_last_V_1_data_out = 1'd1;

assign link_out_1_V_last_V_1_sel = link_out_1_V_last_V_1_sel_rd;

assign link_out_1_V_last_V_1_vld_out = link_out_1_V_last_V_1_state[1'd0];

assign link_out_1_V_user_V_1_ack_out = link_out_1_TREADY;

assign link_out_1_V_user_V_1_data_out = 8'd0;

assign link_out_1_V_user_V_1_sel = link_out_1_V_user_V_1_sel_rd;

assign link_out_1_V_user_V_1_vld_out = link_out_1_V_user_V_1_state[1'd0];

assign link_out_2_TDATA = link_out_2_V_data_V_1_data_out;

assign link_out_2_TLAST = link_out_2_V_last_V_1_data_out;

assign link_out_2_TUSER = link_out_2_V_user_V_1_data_out;

assign link_out_2_TVALID = link_out_2_V_last_V_1_state[1'd0];

assign link_out_2_V_data_V_1_ack_in = link_out_2_V_data_V_1_state[1'd1];

assign link_out_2_V_data_V_1_ack_out = link_out_2_TREADY;

assign link_out_2_V_data_V_1_load_A = (link_out_2_V_data_V_1_state_cmp_full & ~link_out_2_V_data_V_1_sel_wr);

assign link_out_2_V_data_V_1_load_B = (link_out_2_V_data_V_1_state_cmp_full & link_out_2_V_data_V_1_sel_wr);

assign link_out_2_V_data_V_1_sel = link_out_2_V_data_V_1_sel_rd;

assign link_out_2_V_data_V_1_state_cmp_full = ((link_out_2_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign link_out_2_V_data_V_1_vld_out = link_out_2_V_data_V_1_state[1'd0];

assign link_out_2_V_last_V_1_ack_out = link_out_2_TREADY;

assign link_out_2_V_last_V_1_data_out = 1'd1;

assign link_out_2_V_last_V_1_sel = link_out_2_V_last_V_1_sel_rd;

assign link_out_2_V_last_V_1_vld_out = link_out_2_V_last_V_1_state[1'd0];

assign link_out_2_V_user_V_1_ack_out = link_out_2_TREADY;

assign link_out_2_V_user_V_1_data_out = 8'd0;

assign link_out_2_V_user_V_1_sel = link_out_2_V_user_V_1_sel_rd;

assign link_out_2_V_user_V_1_vld_out = link_out_2_V_user_V_1_state[1'd0];

assign link_out_3_TDATA = link_out_3_V_data_V_1_data_out;

assign link_out_3_TLAST = link_out_3_V_last_V_1_data_out;

assign link_out_3_TUSER = link_out_3_V_user_V_1_data_out;

assign link_out_3_TVALID = link_out_3_V_last_V_1_state[1'd0];

assign link_out_3_V_data_V_1_ack_in = link_out_3_V_data_V_1_state[1'd1];

assign link_out_3_V_data_V_1_ack_out = link_out_3_TREADY;

assign link_out_3_V_data_V_1_load_A = (link_out_3_V_data_V_1_state_cmp_full & ~link_out_3_V_data_V_1_sel_wr);

assign link_out_3_V_data_V_1_load_B = (link_out_3_V_data_V_1_state_cmp_full & link_out_3_V_data_V_1_sel_wr);

assign link_out_3_V_data_V_1_sel = link_out_3_V_data_V_1_sel_rd;

assign link_out_3_V_data_V_1_state_cmp_full = ((link_out_3_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign link_out_3_V_data_V_1_vld_out = link_out_3_V_data_V_1_state[1'd0];

assign link_out_3_V_last_V_1_ack_out = link_out_3_TREADY;

assign link_out_3_V_last_V_1_data_out = 1'd1;

assign link_out_3_V_last_V_1_sel = link_out_3_V_last_V_1_sel_rd;

assign link_out_3_V_last_V_1_vld_out = link_out_3_V_last_V_1_state[1'd0];

assign link_out_3_V_user_V_1_ack_out = link_out_3_TREADY;

assign link_out_3_V_user_V_1_data_out = 8'd0;

assign link_out_3_V_user_V_1_sel = link_out_3_V_user_V_1_sel_rd;

assign link_out_3_V_user_V_1_vld_out = link_out_3_V_user_V_1_state[1'd0];

assign tmp_1_fu_852_p18 = {{{{{{{{{{{{{{{{{grp_stitchInPhi_fu_250_ap_return_33}, {grp_stitchInPhi_fu_250_ap_return_32}}, {grp_stitchInPhi_fu_250_ap_return_31}}, {grp_stitchInPhi_fu_250_ap_return_30}}, {grp_stitchInPhi_fu_250_ap_return_29}}, {grp_stitchInPhi_fu_250_ap_return_28}}, {grp_stitchInPhi_fu_250_ap_return_27}}, {grp_stitchInPhi_fu_250_ap_return_26}}, {grp_stitchInPhi_fu_250_ap_return_25}}, {grp_stitchInPhi_fu_250_ap_return_24}}, {grp_stitchInPhi_fu_250_ap_return_23}}, {grp_stitchInPhi_fu_250_ap_return_22}}, {grp_stitchInPhi_fu_250_ap_return_21}}, {grp_stitchInPhi_fu_250_ap_return_20}}, {grp_stitchInPhi_fu_250_ap_return_19}}, {grp_stitchInPhi_fu_250_ap_return_18}}, {grp_stitchInPhi_fu_250_ap_return_17}};

assign tmp_data_V_4_fu_840_p5 = {{tmp_data_V_3_reg_1042[575:544]}, {tmp_fu_802_p18}};

assign tmp_data_V_5_fu_890_p5 = {{tmp_data_V_3_reg_1042[575:544]}, {tmp_1_fu_852_p18}};

assign tmp_fu_802_p18 = {{{{{{{{{{{{{{{{{grp_stitchInPhi_fu_250_ap_return_16}, {grp_stitchInPhi_fu_250_ap_return_15}}, {grp_stitchInPhi_fu_250_ap_return_14}}, {grp_stitchInPhi_fu_250_ap_return_13}}, {grp_stitchInPhi_fu_250_ap_return_12}}, {grp_stitchInPhi_fu_250_ap_return_11}}, {grp_stitchInPhi_fu_250_ap_return_10}}, {grp_stitchInPhi_fu_250_ap_return_9}}, {grp_stitchInPhi_fu_250_ap_return_8}}, {grp_stitchInPhi_fu_250_ap_return_7}}, {grp_stitchInPhi_fu_250_ap_return_6}}, {grp_stitchInPhi_fu_250_ap_return_5}}, {grp_stitchInPhi_fu_250_ap_return_4}}, {grp_stitchInPhi_fu_250_ap_return_3}}, {grp_stitchInPhi_fu_250_ap_return_2}}, {grp_stitchInPhi_fu_250_ap_return_1}}, {grp_stitchInPhi_fu_250_ap_return_0}};

endmodule //towerMerge_top
