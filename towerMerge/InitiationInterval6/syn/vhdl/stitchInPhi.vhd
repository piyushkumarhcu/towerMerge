-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stitchInPhi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of stitchInPhi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal towersy_0_tower_0_s_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_0_s_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_1_s_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_1_s_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_2_s_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_2_s_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_3_s_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal towersy_1_tower_3_s_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_4_s_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_4_s_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_5_s_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_5_s_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_6_s_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal towersy_1_tower_6_s_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_7_s_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_7_s_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_8_s_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_8_s_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_9_s_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal towersy_1_tower_9_s_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_10_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_10_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_11_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_11_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_12_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal towersy_1_tower_12_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_13_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_13_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_0_tower_14_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal towersy_1_tower_14_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read27 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read28 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read29 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_p_read33 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_288_ap_ready : STD_LOGIC;
    signal grp_stitchNeighbors_fu_288_Ai_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_288_Bi_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_288_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_288_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_296_ap_ready : STD_LOGIC;
    signal grp_stitchNeighbors_fu_296_Ai_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_296_Bi_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_296_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_296_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_304_ap_ready : STD_LOGIC;
    signal grp_stitchNeighbors_fu_304_Ai_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_304_Bi_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_304_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_stitchNeighbors_fu_304_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component stitchNeighbors IS
    port (
        ap_ready : OUT STD_LOGIC;
        Ai_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
        Bi_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_stitchNeighbors_fu_288 : component stitchNeighbors
    port map (
        ap_ready => grp_stitchNeighbors_fu_288_ap_ready,
        Ai_data_V => grp_stitchNeighbors_fu_288_Ai_data_V,
        Bi_data_V => grp_stitchNeighbors_fu_288_Bi_data_V,
        ap_return_0 => grp_stitchNeighbors_fu_288_ap_return_0,
        ap_return_1 => grp_stitchNeighbors_fu_288_ap_return_1);

    grp_stitchNeighbors_fu_296 : component stitchNeighbors
    port map (
        ap_ready => grp_stitchNeighbors_fu_296_ap_ready,
        Ai_data_V => grp_stitchNeighbors_fu_296_Ai_data_V,
        Bi_data_V => grp_stitchNeighbors_fu_296_Bi_data_V,
        ap_return_0 => grp_stitchNeighbors_fu_296_ap_return_0,
        ap_return_1 => grp_stitchNeighbors_fu_296_ap_return_1);

    grp_stitchNeighbors_fu_304 : component stitchNeighbors
    port map (
        ap_ready => grp_stitchNeighbors_fu_304_ap_ready,
        Ai_data_V => grp_stitchNeighbors_fu_304_Ai_data_V,
        Bi_data_V => grp_stitchNeighbors_fu_304_Bi_data_V,
        ap_return_0 => grp_stitchNeighbors_fu_304_ap_return_0,
        ap_return_1 => grp_stitchNeighbors_fu_304_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_p_read10 <= p_read10;
                ap_port_reg_p_read11 <= p_read11;
                ap_port_reg_p_read12 <= p_read12;
                ap_port_reg_p_read13 <= p_read13;
                ap_port_reg_p_read14 <= p_read14;
                ap_port_reg_p_read15 <= p_read15;
                ap_port_reg_p_read16 <= p_read16;
                ap_port_reg_p_read20 <= p_read20;
                ap_port_reg_p_read21 <= p_read21;
                ap_port_reg_p_read22 <= p_read22;
                ap_port_reg_p_read23 <= p_read23;
                ap_port_reg_p_read24 <= p_read24;
                ap_port_reg_p_read25 <= p_read25;
                ap_port_reg_p_read26 <= p_read26;
                ap_port_reg_p_read27 <= p_read27;
                ap_port_reg_p_read28 <= p_read28;
                ap_port_reg_p_read29 <= p_read29;
                ap_port_reg_p_read3 <= p_read3;
                ap_port_reg_p_read30 <= p_read30;
                ap_port_reg_p_read31 <= p_read31;
                ap_port_reg_p_read32 <= p_read32;
                ap_port_reg_p_read33 <= p_read33;
                ap_port_reg_p_read4 <= p_read4;
                ap_port_reg_p_read5 <= p_read5;
                ap_port_reg_p_read6 <= p_read6;
                ap_port_reg_p_read7 <= p_read7;
                ap_port_reg_p_read8 <= p_read8;
                ap_port_reg_p_read9 <= p_read9;
                towersy_0_tower_0_s_reg_538 <= grp_stitchNeighbors_fu_288_ap_return_0;
                towersy_0_tower_1_s_reg_548 <= grp_stitchNeighbors_fu_296_ap_return_0;
                towersy_0_tower_2_s_reg_558 <= grp_stitchNeighbors_fu_304_ap_return_0;
                towersy_1_tower_0_s_reg_543 <= grp_stitchNeighbors_fu_288_ap_return_1;
                towersy_1_tower_1_s_reg_553 <= grp_stitchNeighbors_fu_296_ap_return_1;
                towersy_1_tower_2_s_reg_563 <= grp_stitchNeighbors_fu_304_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                towersy_0_tower_10_reg_638 <= grp_stitchNeighbors_fu_296_ap_return_0;
                towersy_0_tower_11_reg_648 <= grp_stitchNeighbors_fu_304_ap_return_0;
                towersy_0_tower_9_s_reg_628 <= grp_stitchNeighbors_fu_288_ap_return_0;
                towersy_1_tower_10_reg_643 <= grp_stitchNeighbors_fu_296_ap_return_1;
                towersy_1_tower_11_reg_653 <= grp_stitchNeighbors_fu_304_ap_return_1;
                towersy_1_tower_9_s_reg_633 <= grp_stitchNeighbors_fu_288_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                towersy_0_tower_12_reg_658 <= grp_stitchNeighbors_fu_288_ap_return_0;
                towersy_0_tower_13_reg_668 <= grp_stitchNeighbors_fu_296_ap_return_0;
                towersy_0_tower_14_reg_678 <= grp_stitchNeighbors_fu_304_ap_return_0;
                towersy_1_tower_12_reg_663 <= grp_stitchNeighbors_fu_288_ap_return_1;
                towersy_1_tower_13_reg_673 <= grp_stitchNeighbors_fu_296_ap_return_1;
                towersy_1_tower_14_reg_683 <= grp_stitchNeighbors_fu_304_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                towersy_0_tower_3_s_reg_568 <= grp_stitchNeighbors_fu_288_ap_return_0;
                towersy_0_tower_4_s_reg_578 <= grp_stitchNeighbors_fu_296_ap_return_0;
                towersy_0_tower_5_s_reg_588 <= grp_stitchNeighbors_fu_304_ap_return_0;
                towersy_1_tower_3_s_reg_573 <= grp_stitchNeighbors_fu_288_ap_return_1;
                towersy_1_tower_4_s_reg_583 <= grp_stitchNeighbors_fu_296_ap_return_1;
                towersy_1_tower_5_s_reg_593 <= grp_stitchNeighbors_fu_304_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                towersy_0_tower_6_s_reg_598 <= grp_stitchNeighbors_fu_288_ap_return_0;
                towersy_0_tower_7_s_reg_608 <= grp_stitchNeighbors_fu_296_ap_return_0;
                towersy_0_tower_8_s_reg_618 <= grp_stitchNeighbors_fu_304_ap_return_0;
                towersy_1_tower_6_s_reg_603 <= grp_stitchNeighbors_fu_288_ap_return_1;
                towersy_1_tower_7_s_reg_613 <= grp_stitchNeighbors_fu_296_ap_return_1;
                towersy_1_tower_8_s_reg_623 <= grp_stitchNeighbors_fu_304_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= towersy_0_tower_0_s_reg_538;
    ap_return_1 <= towersy_0_tower_1_s_reg_548;
    ap_return_10 <= towersy_0_tower_10_reg_638;
    ap_return_11 <= towersy_0_tower_11_reg_648;
    ap_return_12 <= towersy_0_tower_12_reg_658;
    ap_return_13 <= towersy_0_tower_13_reg_668;
    ap_return_14 <= towersy_0_tower_14_reg_678;
    ap_return_15 <= grp_stitchNeighbors_fu_288_ap_return_0;
    ap_return_16 <= grp_stitchNeighbors_fu_296_ap_return_0;
    ap_return_17 <= towersy_1_tower_0_s_reg_543;
    ap_return_18 <= towersy_1_tower_1_s_reg_553;
    ap_return_19 <= towersy_1_tower_2_s_reg_563;
    ap_return_2 <= towersy_0_tower_2_s_reg_558;
    ap_return_20 <= towersy_1_tower_3_s_reg_573;
    ap_return_21 <= towersy_1_tower_4_s_reg_583;
    ap_return_22 <= towersy_1_tower_5_s_reg_593;
    ap_return_23 <= towersy_1_tower_6_s_reg_603;
    ap_return_24 <= towersy_1_tower_7_s_reg_613;
    ap_return_25 <= towersy_1_tower_8_s_reg_623;
    ap_return_26 <= towersy_1_tower_9_s_reg_633;
    ap_return_27 <= towersy_1_tower_10_reg_643;
    ap_return_28 <= towersy_1_tower_11_reg_653;
    ap_return_29 <= towersy_1_tower_12_reg_663;
    ap_return_3 <= towersy_0_tower_3_s_reg_568;
    ap_return_30 <= towersy_1_tower_13_reg_673;
    ap_return_31 <= towersy_1_tower_14_reg_683;
    ap_return_32 <= grp_stitchNeighbors_fu_288_ap_return_1;
    ap_return_33 <= grp_stitchNeighbors_fu_296_ap_return_1;
    ap_return_4 <= towersy_0_tower_4_s_reg_578;
    ap_return_5 <= towersy_0_tower_5_s_reg_588;
    ap_return_6 <= towersy_0_tower_6_s_reg_598;
    ap_return_7 <= towersy_0_tower_7_s_reg_608;
    ap_return_8 <= towersy_0_tower_8_s_reg_618;
    ap_return_9 <= towersy_0_tower_9_s_reg_628;

    grp_stitchNeighbors_fu_288_Ai_data_V_assign_proc : process(ap_CS_fsm_state1, p_read, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_port_reg_p_read3, ap_port_reg_p_read6, ap_port_reg_p_read9, ap_port_reg_p_read12, ap_port_reg_p_read15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_stitchNeighbors_fu_288_Ai_data_V <= ap_port_reg_p_read15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_stitchNeighbors_fu_288_Ai_data_V <= ap_port_reg_p_read12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_stitchNeighbors_fu_288_Ai_data_V <= ap_port_reg_p_read9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_stitchNeighbors_fu_288_Ai_data_V <= ap_port_reg_p_read6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_stitchNeighbors_fu_288_Ai_data_V <= ap_port_reg_p_read3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_stitchNeighbors_fu_288_Ai_data_V <= p_read;
        else 
            grp_stitchNeighbors_fu_288_Ai_data_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_stitchNeighbors_fu_288_Bi_data_V_assign_proc : process(ap_CS_fsm_state1, p_read17, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_port_reg_p_read20, ap_port_reg_p_read23, ap_port_reg_p_read26, ap_port_reg_p_read29, ap_port_reg_p_read32, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_stitchNeighbors_fu_288_Bi_data_V <= ap_port_reg_p_read32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_stitchNeighbors_fu_288_Bi_data_V <= ap_port_reg_p_read29;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_stitchNeighbors_fu_288_Bi_data_V <= ap_port_reg_p_read26;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_stitchNeighbors_fu_288_Bi_data_V <= ap_port_reg_p_read23;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_stitchNeighbors_fu_288_Bi_data_V <= ap_port_reg_p_read20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_stitchNeighbors_fu_288_Bi_data_V <= p_read17;
        else 
            grp_stitchNeighbors_fu_288_Bi_data_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_stitchNeighbors_fu_296_Ai_data_V_assign_proc : process(ap_CS_fsm_state1, p_read1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_port_reg_p_read4, ap_port_reg_p_read7, ap_port_reg_p_read10, ap_port_reg_p_read13, ap_port_reg_p_read16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_stitchNeighbors_fu_296_Ai_data_V <= ap_port_reg_p_read16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_stitchNeighbors_fu_296_Ai_data_V <= ap_port_reg_p_read13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_stitchNeighbors_fu_296_Ai_data_V <= ap_port_reg_p_read10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_stitchNeighbors_fu_296_Ai_data_V <= ap_port_reg_p_read7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_stitchNeighbors_fu_296_Ai_data_V <= ap_port_reg_p_read4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_stitchNeighbors_fu_296_Ai_data_V <= p_read1;
        else 
            grp_stitchNeighbors_fu_296_Ai_data_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_stitchNeighbors_fu_296_Bi_data_V_assign_proc : process(ap_CS_fsm_state1, p_read18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_port_reg_p_read21, ap_port_reg_p_read24, ap_port_reg_p_read27, ap_port_reg_p_read30, ap_port_reg_p_read33, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_stitchNeighbors_fu_296_Bi_data_V <= ap_port_reg_p_read33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_stitchNeighbors_fu_296_Bi_data_V <= ap_port_reg_p_read30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_stitchNeighbors_fu_296_Bi_data_V <= ap_port_reg_p_read27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_stitchNeighbors_fu_296_Bi_data_V <= ap_port_reg_p_read24;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_stitchNeighbors_fu_296_Bi_data_V <= ap_port_reg_p_read21;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_stitchNeighbors_fu_296_Bi_data_V <= p_read18;
        else 
            grp_stitchNeighbors_fu_296_Bi_data_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_stitchNeighbors_fu_304_Ai_data_V_assign_proc : process(ap_CS_fsm_state1, p_read2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_port_reg_p_read5, ap_port_reg_p_read8, ap_port_reg_p_read11, ap_port_reg_p_read14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_stitchNeighbors_fu_304_Ai_data_V <= ap_port_reg_p_read14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_stitchNeighbors_fu_304_Ai_data_V <= ap_port_reg_p_read11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_stitchNeighbors_fu_304_Ai_data_V <= ap_port_reg_p_read8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_stitchNeighbors_fu_304_Ai_data_V <= ap_port_reg_p_read5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_stitchNeighbors_fu_304_Ai_data_V <= p_read2;
        else 
            grp_stitchNeighbors_fu_304_Ai_data_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_stitchNeighbors_fu_304_Bi_data_V_assign_proc : process(ap_CS_fsm_state1, p_read19, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_port_reg_p_read22, ap_port_reg_p_read25, ap_port_reg_p_read28, ap_port_reg_p_read31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_stitchNeighbors_fu_304_Bi_data_V <= ap_port_reg_p_read31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_stitchNeighbors_fu_304_Bi_data_V <= ap_port_reg_p_read28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_stitchNeighbors_fu_304_Bi_data_V <= ap_port_reg_p_read25;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_stitchNeighbors_fu_304_Bi_data_V <= ap_port_reg_p_read22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_stitchNeighbors_fu_304_Bi_data_V <= p_read19;
        else 
            grp_stitchNeighbors_fu_304_Bi_data_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
